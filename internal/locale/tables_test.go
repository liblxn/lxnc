// This file was generated by data-gen. Do not edit.
// CLDR version: 40.0

package locale

import (
	"reflect"
	"strings"
	"testing"
)

func TestLangTags(t *testing.T) {
	expected := map[langID]string{ // lang id => string
		0x01: "af ", 0x02: "agq", 0x03: "ak ", 0x04: "am ", 0x05: "ar ", 0x06: "as ",
		0x07: "asa", 0x08: "ast", 0x09: "az ", 0x0a: "bas", 0x0b: "be ", 0x0c: "bem",
		0x0d: "bez", 0x0e: "bg ", 0x0f: "bm ", 0x10: "bn ", 0x11: "bo ", 0x12: "br ",
		0x13: "brx", 0x14: "bs ", 0x15: "ca ", 0x16: "ccp", 0x17: "ce ", 0x18: "ceb",
		0x19: "cgg", 0x1a: "chr", 0x1b: "ckb", 0x1c: "cs ", 0x1d: "cy ", 0x1e: "da ",
		0x1f: "dav", 0x20: "de ", 0x21: "dje", 0x22: "doi", 0x23: "dsb", 0x24: "dua",
		0x25: "dyo", 0x26: "dz ", 0x27: "ebu", 0x28: "ee ", 0x29: "el ", 0x2a: "en ",
		0x2b: "eo ", 0x2c: "es ", 0x2d: "et ", 0x2e: "eu ", 0x2f: "ewo", 0x30: "fa ",
		0x31: "ff ", 0x32: "fi ", 0x33: "fil", 0x34: "fo ", 0x35: "fr ", 0x36: "fur",
		0x37: "fy ", 0x38: "ga ", 0x39: "gd ", 0x3a: "gl ", 0x3b: "gsw", 0x3c: "gu ",
		0x3d: "guz", 0x3e: "gv ", 0x3f: "ha ", 0x40: "haw", 0x41: "he ", 0x42: "hi ",
		0x43: "hr ", 0x44: "hsb", 0x45: "hu ", 0x46: "hy ", 0x47: "ia ", 0x48: "id ",
		0x49: "ig ", 0x4a: "ii ", 0x4b: "is ", 0x4c: "it ", 0x4d: "ja ", 0x4e: "jgo",
		0x4f: "jmc", 0x50: "jv ", 0x51: "ka ", 0x52: "kab", 0x53: "kam", 0x54: "kde",
		0x55: "kea", 0x56: "kgp", 0x57: "khq", 0x58: "ki ", 0x59: "kk ", 0x5a: "kkj",
		0x5b: "kl ", 0x5c: "kln", 0x5d: "km ", 0x5e: "kn ", 0x5f: "ko ", 0x60: "kok",
		0x61: "ks ", 0x62: "ksb", 0x63: "ksf", 0x64: "ksh", 0x65: "ku ", 0x66: "kw ",
		0x67: "ky ", 0x68: "lag", 0x69: "lb ", 0x6a: "lg ", 0x6b: "lkt", 0x6c: "ln ",
		0x6d: "lo ", 0x6e: "lrc", 0x6f: "lt ", 0x70: "lu ", 0x71: "luo", 0x72: "luy",
		0x73: "lv ", 0x74: "mai", 0x75: "mas", 0x76: "mer", 0x77: "mfe", 0x78: "mg ",
		0x79: "mgh", 0x7a: "mgo", 0x7b: "mi ", 0x7c: "mk ", 0x7d: "ml ", 0x7e: "mn ",
		0x7f: "mni", 0x80: "mr ", 0x81: "ms ", 0x82: "mt ", 0x83: "mua", 0x84: "my ",
		0x85: "mzn", 0x86: "naq", 0x87: "nb ", 0x88: "nd ", 0x89: "nds", 0x8a: "ne ",
		0x8b: "nl ", 0x8c: "nmg", 0x8d: "nn ", 0x8e: "nnh", 0x8f: "no ", 0x90: "nus",
		0x91: "nyn", 0x92: "om ", 0x93: "or ", 0x94: "os ", 0x95: "pa ", 0x96: "pcm",
		0x97: "pl ", 0x98: "ps ", 0x99: "pt ", 0x9a: "qu ", 0x9b: "rm ", 0x9c: "rn ",
		0x9d: "ro ", 0x9e: "rof", 0x9f: "ru ", 0xa0: "rw ", 0xa1: "rwk", 0xa2: "sa ",
		0xa3: "sah", 0xa4: "saq", 0xa5: "sat", 0xa6: "sbp", 0xa7: "sc ", 0xa8: "sd ",
		0xa9: "se ", 0xaa: "seh", 0xab: "ses", 0xac: "sg ", 0xad: "shi", 0xae: "si ",
		0xaf: "sk ", 0xb0: "sl ", 0xb1: "smn", 0xb2: "sn ", 0xb3: "so ", 0xb4: "sq ",
		0xb5: "sr ", 0xb6: "su ", 0xb7: "sv ", 0xb8: "sw ", 0xb9: "ta ", 0xba: "te ",
		0xbb: "teo", 0xbc: "tg ", 0xbd: "th ", 0xbe: "ti ", 0xbf: "tk ", 0xc0: "to ",
		0xc1: "tr ", 0xc2: "tt ", 0xc3: "twq", 0xc4: "tzm", 0xc5: "ug ", 0xc6: "uk ",
		0xc7: "und", 0xc8: "ur ", 0xc9: "uz ", 0xca: "vai", 0xcb: "vi ", 0xcc: "vun",
		0xcd: "wae", 0xce: "wo ", 0xcf: "xh ", 0xd0: "xog", 0xd1: "yav", 0xd2: "yi ",
		0xd3: "yo ", 0xd4: "yrl", 0xd5: "yue", 0xd6: "zgh", 0xd7: "zh ", 0xd8: "zu ",
	}

	for id, str := range expected {
		if s := langTags.lang(id); s != strings.TrimSpace(str) {
			t.Fatalf("unexpected string for id %d: %q", uint(id), s)
		}
	}
}

func TestScriptTags(t *testing.T) {
	expected := map[scriptID]string{ // script id => string
		0x01: "Adlm", 0x02: "Arab", 0x03: "Beng", 0x04: "Cyrl", 0x05: "Deva",
		0x06: "Guru", 0x07: "Hans", 0x08: "Hant", 0x09: "Latn", 0x0a: "Olck",
		0x0b: "Tfng", 0x0c: "Vaii",
	}

	for id, str := range expected {
		if s := scriptTags.script(id); s != strings.TrimSpace(str) {
			t.Fatalf("unexpected string for id %d: %q", uint(id), s)
		}
	}
}

func TestRegionTags(t *testing.T) {
	expected := map[regionID]string{ // region id => string
		0x01: "001", 0x02: "150", 0x03: "419", 0x04: "AD ", 0x05: "AE ", 0x06: "AF ",
		0x07: "AG ", 0x08: "AI ", 0x09: "AL ", 0x0a: "AM ", 0x0b: "AO ", 0x0c: "AR ",
		0x0d: "AS ", 0x0e: "AT ", 0x0f: "AU ", 0x10: "AW ", 0x11: "AX ", 0x12: "AZ ",
		0x13: "BA ", 0x14: "BB ", 0x15: "BD ", 0x16: "BE ", 0x17: "BF ", 0x18: "BG ",
		0x19: "BH ", 0x1a: "BI ", 0x1b: "BJ ", 0x1c: "BL ", 0x1d: "BM ", 0x1e: "BN ",
		0x1f: "BO ", 0x20: "BQ ", 0x21: "BR ", 0x22: "BS ", 0x23: "BT ", 0x24: "BW ",
		0x25: "BY ", 0x26: "BZ ", 0x27: "CA ", 0x28: "CC ", 0x29: "CD ", 0x2a: "CF ",
		0x2b: "CG ", 0x2c: "CH ", 0x2d: "CI ", 0x2e: "CK ", 0x2f: "CL ", 0x30: "CM ",
		0x31: "CN ", 0x32: "CO ", 0x33: "CR ", 0x34: "CU ", 0x35: "CV ", 0x36: "CW ",
		0x37: "CX ", 0x38: "CY ", 0x39: "CZ ", 0x3a: "DE ", 0x3b: "DG ", 0x3c: "DJ ",
		0x3d: "DK ", 0x3e: "DM ", 0x3f: "DO ", 0x40: "DZ ", 0x41: "EA ", 0x42: "EC ",
		0x43: "EE ", 0x44: "EG ", 0x45: "EH ", 0x46: "ER ", 0x47: "ES ", 0x48: "ET ",
		0x49: "FI ", 0x4a: "FJ ", 0x4b: "FK ", 0x4c: "FM ", 0x4d: "FO ", 0x4e: "FR ",
		0x4f: "GA ", 0x50: "GB ", 0x51: "GD ", 0x52: "GE ", 0x53: "GF ", 0x54: "GG ",
		0x55: "GH ", 0x56: "GI ", 0x57: "GL ", 0x58: "GM ", 0x59: "GN ", 0x5a: "GP ",
		0x5b: "GQ ", 0x5c: "GR ", 0x5d: "GT ", 0x5e: "GU ", 0x5f: "GW ", 0x60: "GY ",
		0x61: "HK ", 0x62: "HN ", 0x63: "HR ", 0x64: "HT ", 0x65: "HU ", 0x66: "IC ",
		0x67: "ID ", 0x68: "IE ", 0x69: "IL ", 0x6a: "IM ", 0x6b: "IN ", 0x6c: "IO ",
		0x6d: "IQ ", 0x6e: "IR ", 0x6f: "IS ", 0x70: "IT ", 0x71: "JE ", 0x72: "JM ",
		0x73: "JO ", 0x74: "JP ", 0x75: "KE ", 0x76: "KG ", 0x77: "KH ", 0x78: "KI ",
		0x79: "KM ", 0x7a: "KN ", 0x7b: "KP ", 0x7c: "KR ", 0x7d: "KW ", 0x7e: "KY ",
		0x7f: "KZ ", 0x80: "LA ", 0x81: "LB ", 0x82: "LC ", 0x83: "LI ", 0x84: "LK ",
		0x85: "LR ", 0x86: "LS ", 0x87: "LT ", 0x88: "LU ", 0x89: "LV ", 0x8a: "LY ",
		0x8b: "MA ", 0x8c: "MC ", 0x8d: "MD ", 0x8e: "ME ", 0x8f: "MF ", 0x90: "MG ",
		0x91: "MH ", 0x92: "MK ", 0x93: "ML ", 0x94: "MM ", 0x95: "MN ", 0x96: "MO ",
		0x97: "MP ", 0x98: "MQ ", 0x99: "MR ", 0x9a: "MS ", 0x9b: "MT ", 0x9c: "MU ",
		0x9d: "MW ", 0x9e: "MX ", 0x9f: "MY ", 0xa0: "MZ ", 0xa1: "NA ", 0xa2: "NC ",
		0xa3: "NE ", 0xa4: "NF ", 0xa5: "NG ", 0xa6: "NI ", 0xa7: "NL ", 0xa8: "NO ",
		0xa9: "NP ", 0xaa: "NR ", 0xab: "NU ", 0xac: "NZ ", 0xad: "OM ", 0xae: "PA ",
		0xaf: "PE ", 0xb0: "PF ", 0xb1: "PG ", 0xb2: "PH ", 0xb3: "PK ", 0xb4: "PL ",
		0xb5: "PM ", 0xb6: "PN ", 0xb7: "PR ", 0xb8: "PS ", 0xb9: "PT ", 0xba: "PW ",
		0xbb: "PY ", 0xbc: "QA ", 0xbd: "RE ", 0xbe: "RO ", 0xbf: "RS ", 0xc0: "RU ",
		0xc1: "RW ", 0xc2: "SA ", 0xc3: "SB ", 0xc4: "SC ", 0xc5: "SD ", 0xc6: "SE ",
		0xc7: "SG ", 0xc8: "SH ", 0xc9: "SI ", 0xca: "SJ ", 0xcb: "SK ", 0xcc: "SL ",
		0xcd: "SM ", 0xce: "SN ", 0xcf: "SO ", 0xd0: "SR ", 0xd1: "SS ", 0xd2: "ST ",
		0xd3: "SV ", 0xd4: "SX ", 0xd5: "SY ", 0xd6: "SZ ", 0xd7: "TC ", 0xd8: "TD ",
		0xd9: "TG ", 0xda: "TH ", 0xdb: "TJ ", 0xdc: "TK ", 0xdd: "TL ", 0xde: "TM ",
		0xdf: "TN ", 0xe0: "TO ", 0xe1: "TR ", 0xe2: "TT ", 0xe3: "TV ", 0xe4: "TW ",
		0xe5: "TZ ", 0xe6: "UA ", 0xe7: "UG ", 0xe8: "UM ", 0xe9: "US ", 0xea: "UY ",
		0xeb: "UZ ", 0xec: "VA ", 0xed: "VC ", 0xee: "VE ", 0xef: "VG ", 0xf0: "VI ",
		0xf1: "VN ", 0xf2: "VU ", 0xf3: "WF ", 0xf4: "WS ", 0xf5: "XK ", 0xf6: "YE ",
		0xf7: "YT ", 0xf8: "ZA ", 0xf9: "ZM ", 0xfa: "ZW ",
	}

	for id, str := range expected {
		if s := regionTags.region(id); s != strings.TrimSpace(str) {
			t.Fatalf("unexpected string for id %d: %q", uint(id), s)
		}
	}
}

func TestRegionContainment(t *testing.T) {
	expected := map[string][]regionID{ // child region => parent region ids
		"AC": {0x01, 0x00}, "AD": {0x02, 0x01}, "AE": {0x01, 0x00}, "AF": {0x01, 0x00},
		"AG": {0x03, 0x01}, "AI": {0x03, 0x01}, "AL": {0x02, 0x01}, "AM": {0x01, 0x00},
		"AO": {0x01, 0x00}, "AQ": {0x01, 0x00}, "AR": {0x03, 0x01}, "AS": {0x01, 0x00},
		"AT": {0x02, 0x01}, "AU": {0x01, 0x00}, "AW": {0x03, 0x01}, "AX": {0x02, 0x01},
		"AZ": {0x01, 0x00}, "BA": {0x02, 0x01}, "BB": {0x03, 0x01}, "BD": {0x01, 0x00},
		"BE": {0x02, 0x01}, "BF": {0x01, 0x00}, "BG": {0x02, 0x01}, "BH": {0x01, 0x00},
		"BI": {0x01, 0x00}, "BJ": {0x01, 0x00}, "BL": {0x03, 0x01}, "BM": {0x01, 0x00},
		"BN": {0x01, 0x00}, "BO": {0x03, 0x01}, "BQ": {0x03, 0x01}, "BR": {0x03, 0x01},
		"BS": {0x03, 0x01}, "BT": {0x01, 0x00}, "BV": {0x03, 0x01}, "BW": {0x01, 0x00},
		"BY": {0x02, 0x01}, "BZ": {0x03, 0x01}, "CA": {0x01, 0x00}, "CC": {0x01, 0x00},
		"CD": {0x01, 0x00}, "CF": {0x01, 0x00}, "CG": {0x01, 0x00}, "CH": {0x02, 0x01},
		"CI": {0x01, 0x00}, "CK": {0x01, 0x00}, "CL": {0x03, 0x01}, "CM": {0x01, 0x00},
		"CN": {0x01, 0x00}, "CO": {0x03, 0x01}, "CP": {0x01, 0x00}, "CR": {0x03, 0x01},
		"CU": {0x03, 0x01}, "CV": {0x01, 0x00}, "CW": {0x03, 0x01}, "CX": {0x01, 0x00},
		"CY": {0x01, 0x00}, "CZ": {0x02, 0x01}, "DE": {0x02, 0x01}, "DG": {0x01, 0x00},
		"DJ": {0x01, 0x00}, "DK": {0x02, 0x01}, "DM": {0x03, 0x01}, "DO": {0x03, 0x01},
		"DZ": {0x01, 0x00}, "EA": {0x01, 0x00}, "EC": {0x03, 0x01}, "EE": {0x02, 0x01},
		"EG": {0x01, 0x00}, "EH": {0x01, 0x00}, "ER": {0x01, 0x00}, "ES": {0x02, 0x01},
		"ET": {0x01, 0x00}, "FI": {0x02, 0x01}, "FJ": {0x01, 0x00}, "FK": {0x03, 0x01},
		"FM": {0x01, 0x00}, "FO": {0x02, 0x01}, "FR": {0x02, 0x01}, "GA": {0x01, 0x00},
		"GB": {0x02, 0x01}, "GD": {0x03, 0x01}, "GE": {0x01, 0x00}, "GF": {0x03, 0x01},
		"GG": {0x02, 0x01}, "GH": {0x01, 0x00}, "GI": {0x02, 0x01}, "GL": {0x01, 0x00},
		"GM": {0x01, 0x00}, "GN": {0x01, 0x00}, "GP": {0x03, 0x01}, "GQ": {0x01, 0x00},
		"GR": {0x02, 0x01}, "GS": {0x03, 0x01}, "GT": {0x03, 0x01}, "GU": {0x01, 0x00},
		"GW": {0x01, 0x00}, "GY": {0x03, 0x01}, "HK": {0x01, 0x00}, "HM": {0x01, 0x00},
		"HN": {0x03, 0x01}, "HR": {0x02, 0x01}, "HT": {0x03, 0x01}, "HU": {0x02, 0x01},
		"IC": {0x01, 0x00}, "ID": {0x01, 0x00}, "IE": {0x02, 0x01}, "IL": {0x01, 0x00},
		"IM": {0x02, 0x01}, "IN": {0x01, 0x00}, "IO": {0x01, 0x00}, "IQ": {0x01, 0x00},
		"IR": {0x01, 0x00}, "IS": {0x02, 0x01}, "IT": {0x02, 0x01}, "JE": {0x02, 0x01},
		"JM": {0x03, 0x01}, "JO": {0x01, 0x00}, "JP": {0x01, 0x00}, "KE": {0x01, 0x00},
		"KG": {0x01, 0x00}, "KH": {0x01, 0x00}, "KI": {0x01, 0x00}, "KM": {0x01, 0x00},
		"KN": {0x03, 0x01}, "KP": {0x01, 0x00}, "KR": {0x01, 0x00}, "KW": {0x01, 0x00},
		"KY": {0x03, 0x01}, "KZ": {0x01, 0x00}, "LA": {0x01, 0x00}, "LB": {0x01, 0x00},
		"LC": {0x03, 0x01}, "LI": {0x02, 0x01}, "LK": {0x01, 0x00}, "LR": {0x01, 0x00},
		"LS": {0x01, 0x00}, "LT": {0x02, 0x01}, "LU": {0x02, 0x01}, "LV": {0x02, 0x01},
		"LY": {0x01, 0x00}, "MA": {0x01, 0x00}, "MC": {0x02, 0x01}, "MD": {0x02, 0x01},
		"ME": {0x02, 0x01}, "MF": {0x03, 0x01}, "MG": {0x01, 0x00}, "MH": {0x01, 0x00},
		"MK": {0x02, 0x01}, "ML": {0x01, 0x00}, "MM": {0x01, 0x00}, "MN": {0x01, 0x00},
		"MO": {0x01, 0x00}, "MP": {0x01, 0x00}, "MQ": {0x03, 0x01}, "MR": {0x01, 0x00},
		"MS": {0x03, 0x01}, "MT": {0x02, 0x01}, "MU": {0x01, 0x00}, "MV": {0x01, 0x00},
		"MW": {0x01, 0x00}, "MX": {0x03, 0x01}, "MY": {0x01, 0x00}, "MZ": {0x01, 0x00},
		"NA": {0x01, 0x00}, "NC": {0x01, 0x00}, "NE": {0x01, 0x00}, "NF": {0x01, 0x00},
		"NG": {0x01, 0x00}, "NI": {0x03, 0x01}, "NL": {0x02, 0x01}, "NO": {0x02, 0x01},
		"NP": {0x01, 0x00}, "NR": {0x01, 0x00}, "NU": {0x01, 0x00}, "NZ": {0x01, 0x00},
		"OM": {0x01, 0x00}, "PA": {0x03, 0x01}, "PE": {0x03, 0x01}, "PF": {0x01, 0x00},
		"PG": {0x01, 0x00}, "PH": {0x01, 0x00}, "PK": {0x01, 0x00}, "PL": {0x02, 0x01},
		"PM": {0x01, 0x00}, "PN": {0x01, 0x00}, "PR": {0x03, 0x01}, "PS": {0x01, 0x00},
		"PT": {0x02, 0x01}, "PW": {0x01, 0x00}, "PY": {0x03, 0x01}, "QA": {0x01, 0x00},
		"RE": {0x01, 0x00}, "RO": {0x02, 0x01}, "RS": {0x02, 0x01}, "RU": {0x02, 0x01},
		"RW": {0x01, 0x00}, "SA": {0x01, 0x00}, "SB": {0x01, 0x00}, "SC": {0x01, 0x00},
		"SD": {0x01, 0x00}, "SE": {0x02, 0x01}, "SG": {0x01, 0x00}, "SH": {0x01, 0x00},
		"SI": {0x02, 0x01}, "SJ": {0x02, 0x01}, "SK": {0x02, 0x01}, "SL": {0x01, 0x00},
		"SM": {0x02, 0x01}, "SN": {0x01, 0x00}, "SO": {0x01, 0x00}, "SR": {0x03, 0x01},
		"SS": {0x01, 0x00}, "ST": {0x01, 0x00}, "SV": {0x03, 0x01}, "SX": {0x03, 0x01},
		"SY": {0x01, 0x00}, "SZ": {0x01, 0x00}, "TA": {0x01, 0x00}, "TC": {0x03, 0x01},
		"TD": {0x01, 0x00}, "TF": {0x01, 0x00}, "TG": {0x01, 0x00}, "TH": {0x01, 0x00},
		"TJ": {0x01, 0x00}, "TK": {0x01, 0x00}, "TL": {0x01, 0x00}, "TM": {0x01, 0x00},
		"TN": {0x01, 0x00}, "TO": {0x01, 0x00}, "TR": {0x01, 0x00}, "TT": {0x03, 0x01},
		"TV": {0x01, 0x00}, "TW": {0x01, 0x00}, "TZ": {0x01, 0x00}, "UA": {0x02, 0x01},
		"UG": {0x01, 0x00}, "UM": {0x01, 0x00}, "US": {0x01, 0x00}, "UY": {0x03, 0x01},
		"UZ": {0x01, 0x00}, "VA": {0x02, 0x01}, "VC": {0x03, 0x01}, "VE": {0x03, 0x01},
		"VG": {0x03, 0x01}, "VI": {0x03, 0x01}, "VN": {0x01, 0x00}, "VU": {0x01, 0x00},
		"WF": {0x01, 0x00}, "WS": {0x01, 0x00}, "XK": {0x02, 0x01}, "YE": {0x01, 0x00},
		"YT": {0x01, 0x00}, "ZA": {0x01, 0x00}, "ZM": {0x01, 0x00}, "ZW": {0x01, 0x00},
	}

	for child, expectedParents := range expected {
		expectedN := 2
		for expectedParents[expectedN-1] == 0 {
			expectedN--
		}

		var parents [2]regionID
		n := regionContainment.containmentIDs([]byte(child), parents[:])
		switch {
		case n != expectedN:
			t.Errorf("unexpected number of parents for %s: %d (expected %d)", child, n, expectedN)
		case reflect.DeepEqual(parents, expectedParents):
			t.Errorf("unexpected parents: %v (expected %v)", parents, expectedParents)
		}
	}
}

func TestZeros(t *testing.T) {
	expected := map[zeroID]string{ // zero id => zero
		0x01: "0", 0x02: "٠", 0x04: "۰", 0x06: "०", 0x09: "০", 0x0c: "༠", 0x0f: "၀", 0x12: "᱐", 0x15: "𑄶", 0x19: "𞥐",
	}

	for id, expectedZero := range expected {
		if zero := zeros.zero(id); string(zero) != expectedZero {
			t.Fatalf("unexpected zero for id %d: %s", uint(id), string(zero))
		}
	}
}

func TestAffixes(t *testing.T) {
	expected := map[affixID]affix{ // affix id => affix
		0x01: "\x00\x00", 0x02: "\x00\x01%", 0x03: "\x00\x02¤",
		0x04: "\x00\x03 %", 0x05: "\x00\x04 ¤", 0x06: "\x01\x01%",
		0x07: "\x01\x01-", 0x08: "\x01\x02-%", 0x09: "\x01\x03-¤",
		0x0a: "\x01\x04- %", 0x0b: "\x01\x05- ¤", 0x0c: "\x02\x02-%",
		0x0d: "\x02\x02¤", 0x0e: "\x03\x03% ", 0x0f: "\x03\x03-¤",
		0x10: "\x03\x03¤-", 0x11: "\x03\x07‏ ¤", 0x12: "\x04\x04-% ",
		0x13: "\x04\x04¤ ", 0x14: "\x04\x08‏- ¤", 0x15: "\x05\x05-¤ ",
		0x16: "\x05\x05¤- ", 0x17: "\x05\x05¤ -", 0x18: "\x05\x05‎¤",
		0x19: "\x06\x06-‎¤",
	}

	for expectedID, expectedStr := range expected {
		if s := affixes.affix(expectedID); s != expectedStr {
			t.Fatalf("unexpected affix string for id %d: %s", uint(expectedID), s)
		}
	}
}

func TestPatterns(t *testing.T) {
	expected := map[patternID]pattern{
		0x01: 0x0208100320, 0x02: 0x0107103320, 0x03: 0x0309122320, 0x04: 0x0208100330, 0x05: 0x0107103330,
		0x06: 0x050b122330, 0x07: 0x0309122330, 0x08: 0x040a100330, 0x09: 0x060c100330, 0x0a: 0x0e12100330,
		0x0b: 0x050b122000, 0x0c: 0x0d0f122320, 0x0d: 0x0d0f122330, 0x0e: 0x0d10122330, 0x0f: 0x0d16122330,
		0x10: 0x1315122320, 0x11: 0x1315122330, 0x12: 0x1310122330, 0x13: 0x1313122330, 0x14: 0x1317122330,
		0x15: 0x1819122330, 0x16: 0x1114122330,
	}

	for id, expectedPattern := range expected {
		if pattern := patterns.pattern(id); pattern != expectedPattern {
			t.Fatalf("unexpected pattern for id %d: %#x", uint(id), pattern)
		}
	}
}

func TestNumberSymbols(t *testing.T) {
	expected := map[symbolsID]symbols{ // symbols id => symbols
		0x01: "\x01\x02\x03\x04\x07\x09\x0a\x0b,.%-∞ND,.", 0x02: "\x01\x02\x03\x04\x07\x09\x0a\x0b.,%-∞TF.,", 0x03: "\x01\x02\x03\x04\x07\x0a\x0b\x0c,.%-∞NaN,.",
		0x04: "\x01\x02\x03\x04\x07\x0a\x0b\x0c.,%-∞MaL.,", 0x05: "\x01\x02\x03\x04\x07\x0a\x0b\x0c.,%-∞NaN.,", 0x06: "\x01\x02\x03\x04\x07\x0a\x0b\x0c.,%-∞mnn.,",
		0x07: "\x01\x02\x03\x04\x07\x0c\x0d\x0e.,%-∞Nuimh.,", 0x08: "\x01\x02\x03\x04\x07\x10\x11\x12.,%-∞非数值.,", 0x09: "\x01\x02\x03\x04\x07\x10\x11\x12.,%-∞非數值.,",
		0x0a: "\x01\x02\x03\x04\x07\x1d\x1e\x1f.,%-∞Терхьаш дац.,", 0x0b: "\x01\x02\x03\x04\x07\x2e\x2f\x30.,%-∞ဂဏန်းမဟုတ်သော.,", 0x0c: "\x01\x02\x03\x04\x07\x34\x35\x36,.%-∞ບໍ່​ແມ່ນ​ໂຕ​ເລກ,.",
		0x0d: "\x01\x02\x03\x04\x1c\x2b\x2c\x2d.,%-གྲངས་མེདཨང་མད.,", 0x0e: "\x01\x02\x03\x06\x09\x0c\x0d\x0e,.%−∞NaN,.", 0x0f: "\x01\x02\x03\x07\x0a\x0d\x0e\x0f.,%‎-∞NaN.,",
		0x10: "\x01\x02\x09\x0d\x10\x22\x23\x24,.‎%‎‎-∞ليس رقمًا,.", 0x11: "\x01\x02\x09\x0d\x10\x22\x23\x24.,‎%‎‎-∞ليس رقمًا.,", 0x12: "\x01\x03\x04\x05\x08\x0a\x0b\x0d, %-∞NS, ",
		0x13: "\x01\x03\x04\x05\x08\x0b\x0c\x0d, %-∞NaN,.", 0x14: "\x01\x03\x04\x05\x08\x0b\x0c\x0e, %-∞MdM, ", 0x15: "\x01\x03\x04\x05\x08\x0b\x0c\x0e, %-∞NaN, ",
		0x16: "\x01\x03\x04\x05\x08\x0b\x0c\x0e. %-∞NaN. ", 0x17: "\x01\x03\x04\x05\x08\x0c\x0d\x0f, %-∞НН, ", 0x18: "\x01\x03\x04\x05\x08\x0e\x0f\x11, %-∞ՈչԹ, ",
		0x19: "\x01\x03\x04\x05\x08\x0f\x10\x12, %-∞epiloho, ", 0x1a: "\x01\x03\x04\x05\x08\x11\x12\x14, %-∞san däl, ", 0x1b: "\x01\x03\x04\x05\x08\x11\x12\x14, %-∞son emas, ",
		0x1c: "\x01\x03\x04\x05\x08\x18\x19\x1b, %-∞не число, ", 0x1d: "\x01\x03\x04\x05\x08\x18\x19\x1b, %-∞сан емес, ", 0x1e: "\x01\x03\x04\x05\x08\x18\x19\x1b, %-∞сан эмес, ",
		0x1f: "\x01\x03\x04\x05\x08\x24\x25\x27, %-∞чыыһыла буотах, ", 0x20: "\x01\x03\x04\x05\x08\x28\x29\x2b, %-∞ҳақиқий сон эмас, ", 0x21: "\x01\x03\x04\x05\x08\x30\x31\x33, %-∞არ არის რიცხვი, ",
		0x22: "\x01\x03\x04\x07\x0a\x0d\x0e\x10, %−∞NaN, ", 0x23: "\x01\x03\x04\x07\x0a\x12\x13\x15, %−∞epäluku, ", 0x24: "\x01\x04\x05\x06\x09\x0c\x0d\x10,’%-∞NaN,’",
		0x25: "\x01\x04\x05\x06\x09\x0c\x0d\x10, %-∞NaN, ", 0x26: "\x01\x04\x05\x06\x09\x0c\x0d\x10, %-∞NaN. ", 0x27: "\x01\x04\x05\x06\x09\x0c\x0d\x10.’%-∞NaN.’",
		0x28: "\x01\x04\x05\x08\x0b\x0e\x0f\x12.’%−∞NaN.’", 0x29: "\x02\x04\x05\x0c\x0f\x12\x14\x16٫٬%‎-‎∞NaN٫٬", 0x2a: "\x02\x04\x06\x0a\x0d\x10\x12\x14٫٬٪‏-∞NaN٫٬",
		0x2b: "\x02\x04\x06\x0c\x0f\x19\x1b\x1d٫٬٪‎−∞ناعدد٫٬", 0x2c: "\x02\x04\x06\x0d\x10\x13\x15\x17٫٬٪‎-‎∞NaN٫٬", 0x2d: "\x02\x04\x08\x0b\x0e\x11\x13\x15٫٬٪؜؜-∞NaN٫٬",
		0x2e: "\x02\x04\x08\x0b\x0e\x1c\x1e\x20٫٬٪؜؜-∞ليس رقم٫٬",
	}

	for expectedID, expectedStr := range expected {
		if s := numberSymbols.symbols(expectedID); s != expectedStr {
			t.Fatalf("unexpected symbols string for id %d: %s", uint(expectedID), s)
		}
	}
}

func TestLocaleTags(t *testing.T) {
	expected := map[tagID]tag{ // tag id => tag id
		0x0001: 0x010000, 0x0002: 0x0100a1, 0x0003: 0x0100f8, 0x0004: 0x020000, 0x0005: 0x020030, 0x0006: 0x030000,
		0x0007: 0x030055, 0x0008: 0x040000, 0x0009: 0x040048, 0x000a: 0x050000, 0x000b: 0x050001, 0x000c: 0x050005,
		0x000d: 0x050019, 0x000e: 0x05003c, 0x000f: 0x050040, 0x0010: 0x050044, 0x0011: 0x050045, 0x0012: 0x050046,
		0x0013: 0x050069, 0x0014: 0x05006d, 0x0015: 0x050073, 0x0016: 0x050079, 0x0017: 0x05007d, 0x0018: 0x050081,
		0x0019: 0x05008a, 0x001a: 0x05008b, 0x001b: 0x050099, 0x001c: 0x0500ad, 0x001d: 0x0500b8, 0x001e: 0x0500bc,
		0x001f: 0x0500c2, 0x0020: 0x0500c5, 0x0021: 0x0500cf, 0x0022: 0x0500d1, 0x0023: 0x0500d5, 0x0024: 0x0500d8,
		0x0025: 0x0500df, 0x0026: 0x0500f6, 0x0027: 0x060000, 0x0028: 0x06006b, 0x0029: 0x070000, 0x002a: 0x0700e5,
		0x002b: 0x080000, 0x002c: 0x080047, 0x002d: 0x090000, 0x002e: 0x090400, 0x002f: 0x090412, 0x0030: 0x090900,
		0x0031: 0x090912, 0x0032: 0x0a0000, 0x0033: 0x0a0030, 0x0034: 0x0b0000, 0x0035: 0x0b0025, 0x0036: 0x0c0000,
		0x0037: 0x0c00f9, 0x0038: 0x0d0000, 0x0039: 0x0d00e5, 0x003a: 0x0e0000, 0x003b: 0x0e0018, 0x003c: 0x0f0000,
		0x003d: 0x0f0093, 0x003e: 0x100000, 0x003f: 0x100015, 0x0040: 0x10006b, 0x0041: 0x110000, 0x0042: 0x110031,
		0x0043: 0x11006b, 0x0044: 0x120000, 0x0045: 0x12004e, 0x0046: 0x130000, 0x0047: 0x13006b, 0x0048: 0x140000,
		0x0049: 0x140400, 0x004a: 0x140413, 0x004b: 0x140900, 0x004c: 0x140913, 0x004d: 0x150000, 0x004e: 0x150004,
		0x004f: 0x150047, 0x0050: 0x15004e, 0x0051: 0x150070, 0x0052: 0x160000, 0x0053: 0x160015, 0x0054: 0x16006b,
		0x0055: 0x170000, 0x0056: 0x1700c0, 0x0057: 0x180000, 0x0058: 0x1800b2, 0x0059: 0x190000, 0x005a: 0x1900e7,
		0x005b: 0x1a0000, 0x005c: 0x1a00e9, 0x005d: 0x1b0000, 0x005e: 0x1b006d, 0x005f: 0x1b006e, 0x0060: 0x1c0000,
		0x0061: 0x1c0039, 0x0062: 0x1d0000, 0x0063: 0x1d0050, 0x0064: 0x1e0000, 0x0065: 0x1e003d, 0x0066: 0x1e0057,
		0x0067: 0x1f0000, 0x0068: 0x1f0075, 0x0069: 0x200000, 0x006a: 0x20000e, 0x006b: 0x200016, 0x006c: 0x20002c,
		0x006d: 0x20003a, 0x006e: 0x200070, 0x006f: 0x200083, 0x0070: 0x200088, 0x0071: 0x210000, 0x0072: 0x2100a3,
		0x0073: 0x220000, 0x0074: 0x22006b, 0x0075: 0x230000, 0x0076: 0x23003a, 0x0077: 0x240000, 0x0078: 0x240030,
		0x0079: 0x250000, 0x007a: 0x2500ce, 0x007b: 0x260000, 0x007c: 0x260023, 0x007d: 0x270000, 0x007e: 0x270075,
		0x007f: 0x280000, 0x0080: 0x280055, 0x0081: 0x2800d9, 0x0082: 0x290000, 0x0083: 0x290038, 0x0084: 0x29005c,
		0x0085: 0x2a0000, 0x0086: 0x2a0001, 0x0087: 0x2a0002, 0x0088: 0x2a0005, 0x0089: 0x2a0007, 0x008a: 0x2a0008,
		0x008b: 0x2a000d, 0x008c: 0x2a000e, 0x008d: 0x2a000f, 0x008e: 0x2a0014, 0x008f: 0x2a0016, 0x0090: 0x2a001a,
		0x0091: 0x2a001d, 0x0092: 0x2a0022, 0x0093: 0x2a0024, 0x0094: 0x2a0026, 0x0095: 0x2a0027, 0x0096: 0x2a0028,
		0x0097: 0x2a002c, 0x0098: 0x2a002e, 0x0099: 0x2a0030, 0x009a: 0x2a0037, 0x009b: 0x2a0038, 0x009c: 0x2a003a,
		0x009d: 0x2a003b, 0x009e: 0x2a003d, 0x009f: 0x2a003e, 0x00a0: 0x2a0046, 0x00a1: 0x2a0049, 0x00a2: 0x2a004a,
		0x00a3: 0x2a004b, 0x00a4: 0x2a004c, 0x00a5: 0x2a0050, 0x00a6: 0x2a0051, 0x00a7: 0x2a0054, 0x00a8: 0x2a0055,
		0x00a9: 0x2a0056, 0x00aa: 0x2a0058, 0x00ab: 0x2a005e, 0x00ac: 0x2a0060, 0x00ad: 0x2a0061, 0x00ae: 0x2a0068,
		0x00af: 0x2a0069, 0x00b0: 0x2a006a, 0x00b1: 0x2a006b, 0x00b2: 0x2a006c, 0x00b3: 0x2a0071, 0x00b4: 0x2a0072,
		0x00b5: 0x2a0075, 0x00b6: 0x2a0078, 0x00b7: 0x2a007a, 0x00b8: 0x2a007e, 0x00b9: 0x2a0082, 0x00ba: 0x2a0085,
		0x00bb: 0x2a0086, 0x00bc: 0x2a0090, 0x00bd: 0x2a0091, 0x00be: 0x2a0096, 0x00bf: 0x2a0097, 0x00c0: 0x2a009a,
		0x00c1: 0x2a009b, 0x00c2: 0x2a009c, 0x00c3: 0x2a009d, 0x00c4: 0x2a009f, 0x00c5: 0x2a00a1, 0x00c6: 0x2a00a4,
		0x00c7: 0x2a00a5, 0x00c8: 0x2a00a7, 0x00c9: 0x2a00aa, 0x00ca: 0x2a00ab, 0x00cb: 0x2a00ac, 0x00cc: 0x2a00b1,
		0x00cd: 0x2a00b2, 0x00ce: 0x2a00b3, 0x00cf: 0x2a00b6, 0x00d0: 0x2a00b7, 0x00d1: 0x2a00ba, 0x00d2: 0x2a00c1,
		0x00d3: 0x2a00c3, 0x00d4: 0x2a00c4, 0x00d5: 0x2a00c5, 0x00d6: 0x2a00c6, 0x00d7: 0x2a00c7, 0x00d8: 0x2a00c8,
		0x00d9: 0x2a00c9, 0x00da: 0x2a00cc, 0x00db: 0x2a00d1, 0x00dc: 0x2a00d4, 0x00dd: 0x2a00d6, 0x00de: 0x2a00d7,
		0x00df: 0x2a00dc, 0x00e0: 0x2a00e0, 0x00e1: 0x2a00e2, 0x00e2: 0x2a00e3, 0x00e3: 0x2a00e5, 0x00e4: 0x2a00e7,
		0x00e5: 0x2a00e8, 0x00e6: 0x2a00e9, 0x00e7: 0x2a00ed, 0x00e8: 0x2a00ef, 0x00e9: 0x2a00f0, 0x00ea: 0x2a00f2,
		0x00eb: 0x2a00f4, 0x00ec: 0x2a00f8, 0x00ed: 0x2a00f9, 0x00ee: 0x2a00fa, 0x00ef: 0x2b0000, 0x00f0: 0x2b0001,
		0x00f1: 0x2c0000, 0x00f2: 0x2c0003, 0x00f3: 0x2c000c, 0x00f4: 0x2c001f, 0x00f5: 0x2c0021, 0x00f6: 0x2c0026,
		0x00f7: 0x2c002f, 0x00f8: 0x2c0032, 0x00f9: 0x2c0033, 0x00fa: 0x2c0034, 0x00fb: 0x2c003f, 0x00fc: 0x2c0041,
		0x00fd: 0x2c0042, 0x00fe: 0x2c0047, 0x00ff: 0x2c005b, 0x0100: 0x2c005d, 0x0101: 0x2c0062, 0x0102: 0x2c0066,
		0x0103: 0x2c009e, 0x0104: 0x2c00a6, 0x0105: 0x2c00ae, 0x0106: 0x2c00af, 0x0107: 0x2c00b2, 0x0108: 0x2c00b7,
		0x0109: 0x2c00bb, 0x010a: 0x2c00d3, 0x010b: 0x2c00e9, 0x010c: 0x2c00ea, 0x010d: 0x2c00ee, 0x010e: 0x2d0000,
		0x010f: 0x2d0043, 0x0110: 0x2e0000, 0x0111: 0x2e0047, 0x0112: 0x2f0000, 0x0113: 0x2f0030, 0x0114: 0x300000,
		0x0115: 0x300006, 0x0116: 0x30006e, 0x0117: 0x310000, 0x0118: 0x310100, 0x0119: 0x310117, 0x011a: 0x310130,
		0x011b: 0x310155, 0x011c: 0x310158, 0x011d: 0x310159, 0x011e: 0x31015f, 0x011f: 0x310185, 0x0120: 0x310199,
		0x0121: 0x3101a3, 0x0122: 0x3101a5, 0x0123: 0x3101cc, 0x0124: 0x3101ce, 0x0125: 0x310900, 0x0126: 0x310917,
		0x0127: 0x310930, 0x0128: 0x310955, 0x0129: 0x310958, 0x012a: 0x310959, 0x012b: 0x31095f, 0x012c: 0x310985,
		0x012d: 0x310999, 0x012e: 0x3109a3, 0x012f: 0x3109a5, 0x0130: 0x3109cc, 0x0131: 0x3109ce, 0x0132: 0x320000,
		0x0133: 0x320049, 0x0134: 0x330000, 0x0135: 0x3300b2, 0x0136: 0x340000, 0x0137: 0x34003d, 0x0138: 0x34004d,
		0x0139: 0x350000, 0x013a: 0x350016, 0x013b: 0x350017, 0x013c: 0x35001a, 0x013d: 0x35001b, 0x013e: 0x35001c,
		0x013f: 0x350027, 0x0140: 0x350029, 0x0141: 0x35002a, 0x0142: 0x35002b, 0x0143: 0x35002c, 0x0144: 0x35002d,
		0x0145: 0x350030, 0x0146: 0x35003c, 0x0147: 0x350040, 0x0148: 0x35004e, 0x0149: 0x35004f, 0x014a: 0x350053,
		0x014b: 0x350059, 0x014c: 0x35005a, 0x014d: 0x35005b, 0x014e: 0x350064, 0x014f: 0x350079, 0x0150: 0x350088,
		0x0151: 0x35008b, 0x0152: 0x35008c, 0x0153: 0x35008f, 0x0154: 0x350090, 0x0155: 0x350093, 0x0156: 0x350098,
		0x0157: 0x350099, 0x0158: 0x35009c, 0x0159: 0x3500a2, 0x015a: 0x3500a3, 0x015b: 0x3500b0, 0x015c: 0x3500b5,
		0x015d: 0x3500bd, 0x015e: 0x3500c1, 0x015f: 0x3500c4, 0x0160: 0x3500ce, 0x0161: 0x3500d5, 0x0162: 0x3500d8,
		0x0163: 0x3500d9, 0x0164: 0x3500df, 0x0165: 0x3500f2, 0x0166: 0x3500f3, 0x0167: 0x3500f7, 0x0168: 0x360000,
		0x0169: 0x360070, 0x016a: 0x370000, 0x016b: 0x3700a7, 0x016c: 0x380000, 0x016d: 0x380050, 0x016e: 0x380068,
		0x016f: 0x390000, 0x0170: 0x390050, 0x0171: 0x3a0000, 0x0172: 0x3a0047, 0x0173: 0x3b0000, 0x0174: 0x3b002c,
		0x0175: 0x3b004e, 0x0176: 0x3b0083, 0x0177: 0x3c0000, 0x0178: 0x3c006b, 0x0179: 0x3d0000, 0x017a: 0x3d0075,
		0x017b: 0x3e0000, 0x017c: 0x3e006a, 0x017d: 0x3f0000, 0x017e: 0x3f0055, 0x017f: 0x3f00a3, 0x0180: 0x3f00a5,
		0x0181: 0x400000, 0x0182: 0x4000e9, 0x0183: 0x410000, 0x0184: 0x410069, 0x0185: 0x420000, 0x0186: 0x42006b,
		0x0187: 0x430000, 0x0188: 0x430013, 0x0189: 0x430063, 0x018a: 0x440000, 0x018b: 0x44003a, 0x018c: 0x450000,
		0x018d: 0x450065, 0x018e: 0x460000, 0x018f: 0x46000a, 0x0190: 0x470000, 0x0191: 0x470001, 0x0192: 0x480000,
		0x0193: 0x480067, 0x0194: 0x490000, 0x0195: 0x4900a5, 0x0196: 0x4a0000, 0x0197: 0x4a0031, 0x0198: 0x4b0000,
		0x0199: 0x4b006f, 0x019a: 0x4c0000, 0x019b: 0x4c002c, 0x019c: 0x4c0070, 0x019d: 0x4c00cd, 0x019e: 0x4c00ec,
		0x019f: 0x4d0000, 0x01a0: 0x4d0074, 0x01a1: 0x4e0000, 0x01a2: 0x4e0030, 0x01a3: 0x4f0000, 0x01a4: 0x4f00e5,
		0x01a5: 0x500000, 0x01a6: 0x500067, 0x01a7: 0x510000, 0x01a8: 0x510052, 0x01a9: 0x520000, 0x01aa: 0x520040,
		0x01ab: 0x530000, 0x01ac: 0x530075, 0x01ad: 0x540000, 0x01ae: 0x5400e5, 0x01af: 0x550000, 0x01b0: 0x550035,
		0x01b1: 0x560000, 0x01b2: 0x560021, 0x01b3: 0x570000, 0x01b4: 0x570093, 0x01b5: 0x580000, 0x01b6: 0x580075,
		0x01b7: 0x590000, 0x01b8: 0x59007f, 0x01b9: 0x5a0000, 0x01ba: 0x5a0030, 0x01bb: 0x5b0000, 0x01bc: 0x5b0057,
		0x01bd: 0x5c0000, 0x01be: 0x5c0075, 0x01bf: 0x5d0000, 0x01c0: 0x5d0077, 0x01c1: 0x5e0000, 0x01c2: 0x5e006b,
		0x01c3: 0x5f0000, 0x01c4: 0x5f007b, 0x01c5: 0x5f007c, 0x01c6: 0x600000, 0x01c7: 0x60006b, 0x01c8: 0x610000,
		0x01c9: 0x610200, 0x01ca: 0x61026b, 0x01cb: 0x620000, 0x01cc: 0x6200e5, 0x01cd: 0x630000, 0x01ce: 0x630030,
		0x01cf: 0x640000, 0x01d0: 0x64003a, 0x01d1: 0x650000, 0x01d2: 0x6500e1, 0x01d3: 0x660000, 0x01d4: 0x660050,
		0x01d5: 0x670000, 0x01d6: 0x670076, 0x01d7: 0x680000, 0x01d8: 0x6800e5, 0x01d9: 0x690000, 0x01da: 0x690088,
		0x01db: 0x6a0000, 0x01dc: 0x6a00e7, 0x01dd: 0x6b0000, 0x01de: 0x6b00e9, 0x01df: 0x6c0000, 0x01e0: 0x6c000b,
		0x01e1: 0x6c0029, 0x01e2: 0x6c002a, 0x01e3: 0x6c002b, 0x01e4: 0x6d0000, 0x01e5: 0x6d0080, 0x01e6: 0x6e0000,
		0x01e7: 0x6e006d, 0x01e8: 0x6e006e, 0x01e9: 0x6f0000, 0x01ea: 0x6f0087, 0x01eb: 0x700000, 0x01ec: 0x700029,
		0x01ed: 0x710000, 0x01ee: 0x710075, 0x01ef: 0x720000, 0x01f0: 0x720075, 0x01f1: 0x730000, 0x01f2: 0x730089,
		0x01f3: 0x740000, 0x01f4: 0x74006b, 0x01f5: 0x750000, 0x01f6: 0x750075, 0x01f7: 0x7500e5, 0x01f8: 0x760000,
		0x01f9: 0x760075, 0x01fa: 0x770000, 0x01fb: 0x77009c, 0x01fc: 0x780000, 0x01fd: 0x780090, 0x01fe: 0x790000,
		0x01ff: 0x7900a0, 0x0200: 0x7a0000, 0x0201: 0x7a0030, 0x0202: 0x7b0000, 0x0203: 0x7b00ac, 0x0204: 0x7c0000,
		0x0205: 0x7c0092, 0x0206: 0x7d0000, 0x0207: 0x7d006b, 0x0208: 0x7e0000, 0x0209: 0x7e0095, 0x020a: 0x7f0000,
		0x020b: 0x7f0300, 0x020c: 0x7f036b, 0x020d: 0x800000, 0x020e: 0x80006b, 0x020f: 0x810000, 0x0210: 0x81001e,
		0x0211: 0x810067, 0x0212: 0x81009f, 0x0213: 0x8100c7, 0x0214: 0x820000, 0x0215: 0x82009b, 0x0216: 0x830000,
		0x0217: 0x830030, 0x0218: 0x840000, 0x0219: 0x840094, 0x021a: 0x850000, 0x021b: 0x85006e, 0x021c: 0x860000,
		0x021d: 0x8600a1, 0x021e: 0x870000, 0x021f: 0x8700a8, 0x0220: 0x8700ca, 0x0221: 0x880000, 0x0222: 0x8800fa,
		0x0223: 0x890000, 0x0224: 0x89003a, 0x0225: 0x8900a7, 0x0226: 0x8a0000, 0x0227: 0x8a006b, 0x0228: 0x8a00a9,
		0x0229: 0x8b0000, 0x022a: 0x8b0010, 0x022b: 0x8b0016, 0x022c: 0x8b0020, 0x022d: 0x8b0036, 0x022e: 0x8b00a7,
		0x022f: 0x8b00d0, 0x0230: 0x8b00d4, 0x0231: 0x8c0000, 0x0232: 0x8c0030, 0x0233: 0x8d0000, 0x0234: 0x8d00a8,
		0x0235: 0x8e0000, 0x0236: 0x8e0030, 0x0237: 0x8f0000, 0x0238: 0x900000, 0x0239: 0x9000d1, 0x023a: 0x910000,
		0x023b: 0x9100e7, 0x023c: 0x920000, 0x023d: 0x920048, 0x023e: 0x920075, 0x023f: 0x930000, 0x0240: 0x93006b,
		0x0241: 0x940000, 0x0242: 0x940052, 0x0243: 0x9400c0, 0x0244: 0x950000, 0x0245: 0x950200, 0x0246: 0x9502b3,
		0x0247: 0x950600, 0x0248: 0x95066b, 0x0249: 0x960000, 0x024a: 0x9600a5, 0x024b: 0x970000, 0x024c: 0x9700b4,
		0x024d: 0x980000, 0x024e: 0x980006, 0x024f: 0x9800b3, 0x0250: 0x990000, 0x0251: 0x99000b, 0x0252: 0x990021,
		0x0253: 0x99002c, 0x0254: 0x990035, 0x0255: 0x99005b, 0x0256: 0x99005f, 0x0257: 0x990088, 0x0258: 0x990096,
		0x0259: 0x9900a0, 0x025a: 0x9900b9, 0x025b: 0x9900d2, 0x025c: 0x9900dd, 0x025d: 0x9a0000, 0x025e: 0x9a001f,
		0x025f: 0x9a0042, 0x0260: 0x9a00af, 0x0261: 0x9b0000, 0x0262: 0x9b002c, 0x0263: 0x9c0000, 0x0264: 0x9c001a,
		0x0265: 0x9d0000, 0x0266: 0x9d008d, 0x0267: 0x9d00be, 0x0268: 0x9e0000, 0x0269: 0x9e00e5, 0x026a: 0x9f0000,
		0x026b: 0x9f0025, 0x026c: 0x9f0076, 0x026d: 0x9f007f, 0x026e: 0x9f008d, 0x026f: 0x9f00c0, 0x0270: 0x9f00e6,
		0x0271: 0xa00000, 0x0272: 0xa000c1, 0x0273: 0xa10000, 0x0274: 0xa100e5, 0x0275: 0xa20000, 0x0276: 0xa2006b,
		0x0277: 0xa30000, 0x0278: 0xa300c0, 0x0279: 0xa40000, 0x027a: 0xa40075, 0x027b: 0xa50000, 0x027c: 0xa50a00,
		0x027d: 0xa50a6b, 0x027e: 0xa60000, 0x027f: 0xa600e5, 0x0280: 0xa70000, 0x0281: 0xa70070, 0x0282: 0xa80000,
		0x0283: 0xa80200, 0x0284: 0xa802b3, 0x0285: 0xa80500, 0x0286: 0xa8056b, 0x0287: 0xa90000, 0x0288: 0xa90049,
		0x0289: 0xa900a8, 0x028a: 0xa900c6, 0x028b: 0xaa0000, 0x028c: 0xaa00a0, 0x028d: 0xab0000, 0x028e: 0xab0093,
		0x028f: 0xac0000, 0x0290: 0xac002a, 0x0291: 0xad0000, 0x0292: 0xad0900, 0x0293: 0xad098b, 0x0294: 0xad0b00,
		0x0295: 0xad0b8b, 0x0296: 0xae0000, 0x0297: 0xae0084, 0x0298: 0xaf0000, 0x0299: 0xaf00cb, 0x029a: 0xb00000,
		0x029b: 0xb000c9, 0x029c: 0xb10000, 0x029d: 0xb10049, 0x029e: 0xb20000, 0x029f: 0xb200fa, 0x02a0: 0xb30000,
		0x02a1: 0xb3003c, 0x02a2: 0xb30048, 0x02a3: 0xb30075, 0x02a4: 0xb300cf, 0x02a5: 0xb40000, 0x02a6: 0xb40009,
		0x02a7: 0xb40092, 0x02a8: 0xb400f5, 0x02a9: 0xb50000, 0x02aa: 0xb50400, 0x02ab: 0xb50413, 0x02ac: 0xb5048e,
		0x02ad: 0xb504bf, 0x02ae: 0xb504f5, 0x02af: 0xb50900, 0x02b0: 0xb50913, 0x02b1: 0xb5098e, 0x02b2: 0xb509bf,
		0x02b3: 0xb509f5, 0x02b4: 0xb60000, 0x02b5: 0xb60900, 0x02b6: 0xb60967, 0x02b7: 0xb70000, 0x02b8: 0xb70011,
		0x02b9: 0xb70049, 0x02ba: 0xb700c6, 0x02bb: 0xb80000, 0x02bc: 0xb80029, 0x02bd: 0xb80075, 0x02be: 0xb800e5,
		0x02bf: 0xb800e7, 0x02c0: 0xb90000, 0x02c1: 0xb9006b, 0x02c2: 0xb90084, 0x02c3: 0xb9009f, 0x02c4: 0xb900c7,
		0x02c5: 0xba0000, 0x02c6: 0xba006b, 0x02c7: 0xbb0000, 0x02c8: 0xbb0075, 0x02c9: 0xbb00e7, 0x02ca: 0xbc0000,
		0x02cb: 0xbc00db, 0x02cc: 0xbd0000, 0x02cd: 0xbd00da, 0x02ce: 0xbe0000, 0x02cf: 0xbe0046, 0x02d0: 0xbe0048,
		0x02d1: 0xbf0000, 0x02d2: 0xbf00de, 0x02d3: 0xc00000, 0x02d4: 0xc000e0, 0x02d5: 0xc10000, 0x02d6: 0xc10038,
		0x02d7: 0xc100e1, 0x02d8: 0xc20000, 0x02d9: 0xc200c0, 0x02da: 0xc30000, 0x02db: 0xc300a3, 0x02dc: 0xc40000,
		0x02dd: 0xc4008b, 0x02de: 0xc50000, 0x02df: 0xc50031, 0x02e0: 0xc60000, 0x02e1: 0xc600e6, 0x02e2: 0xc70000,
		0x02e3: 0xc80000, 0x02e4: 0xc8006b, 0x02e5: 0xc800b3, 0x02e6: 0xc90000, 0x02e7: 0xc90200, 0x02e8: 0xc90206,
		0x02e9: 0xc90400, 0x02ea: 0xc904eb, 0x02eb: 0xc90900, 0x02ec: 0xc909eb, 0x02ed: 0xca0000, 0x02ee: 0xca0900,
		0x02ef: 0xca0985, 0x02f0: 0xca0c00, 0x02f1: 0xca0c85, 0x02f2: 0xcb0000, 0x02f3: 0xcb00f1, 0x02f4: 0xcc0000,
		0x02f5: 0xcc00e5, 0x02f6: 0xcd0000, 0x02f7: 0xcd002c, 0x02f8: 0xce0000, 0x02f9: 0xce00ce, 0x02fa: 0xcf0000,
		0x02fb: 0xcf00f8, 0x02fc: 0xd00000, 0x02fd: 0xd000e7, 0x02fe: 0xd10000, 0x02ff: 0xd10030, 0x0300: 0xd20000,
		0x0301: 0xd20001, 0x0302: 0xd30000, 0x0303: 0xd3001b, 0x0304: 0xd300a5, 0x0305: 0xd40000, 0x0306: 0xd40021,
		0x0307: 0xd40032, 0x0308: 0xd400ee, 0x0309: 0xd50000, 0x030a: 0xd50700, 0x030b: 0xd50731, 0x030c: 0xd50800,
		0x030d: 0xd50861, 0x030e: 0xd60000, 0x030f: 0xd6008b, 0x0310: 0xd70000, 0x0311: 0xd70700, 0x0312: 0xd70731,
		0x0313: 0xd70761, 0x0314: 0xd70796, 0x0315: 0xd707c7, 0x0316: 0xd70800, 0x0317: 0xd70861, 0x0318: 0xd70896,
		0x0319: 0xd708e4, 0x031a: 0xd80000, 0x031b: 0xd800f8,
	}

	for expectedTagID, expectedTag := range expected {
		if tag := localeTags.tag(expectedTagID); tag != expectedTag {
			t.Errorf("unexpected tag for id %d, %#x", uint(expectedTagID), tag)
		}
		if tagID := localeTags.tagID(expectedTag.langID(), expectedTag.scriptID(), expectedTag.regionID()); tagID != expectedTagID {
			t.Errorf("unexpected tag id for tag %#x: %d", expectedTag, uint(tagID))
		}
	}
}

func TestParentLocaleTags(t *testing.T) {
	expected := map[tagID]tagID{
		0x002e: 0x02e2, 0x0049: 0x02e2, 0x0087: 0x0086, 0x0089: 0x0086, 0x008a: 0x0086, 0x008c: 0x0087,
		0x008d: 0x0086, 0x008e: 0x0086, 0x008f: 0x0087, 0x0091: 0x0086, 0x0092: 0x0086, 0x0093: 0x0086,
		0x0094: 0x0086, 0x0096: 0x0086, 0x0097: 0x0087, 0x0098: 0x0086, 0x0099: 0x0086, 0x009a: 0x0086,
		0x009b: 0x0086, 0x009c: 0x0087, 0x009d: 0x0086, 0x009e: 0x0087, 0x009f: 0x0086, 0x00a0: 0x0086,
		0x00a1: 0x0087, 0x00a2: 0x0086, 0x00a3: 0x0086, 0x00a4: 0x0086, 0x00a5: 0x0086, 0x00a6: 0x0086,
		0x00a7: 0x0086, 0x00a8: 0x0086, 0x00a9: 0x0086, 0x00aa: 0x0086, 0x00ac: 0x0086, 0x00ad: 0x0086,
		0x00ae: 0x0086, 0x00af: 0x0086, 0x00b0: 0x0086, 0x00b1: 0x0086, 0x00b2: 0x0086, 0x00b3: 0x0086,
		0x00b4: 0x0086, 0x00b5: 0x0086, 0x00b6: 0x0086, 0x00b7: 0x0086, 0x00b8: 0x0086, 0x00b9: 0x0086,
		0x00ba: 0x0086, 0x00bb: 0x0086, 0x00bc: 0x0086, 0x00be: 0x0086, 0x00c0: 0x0086, 0x00c1: 0x0086,
		0x00c2: 0x0086, 0x00c3: 0x0086, 0x00c4: 0x0086, 0x00c5: 0x0086, 0x00c6: 0x0086, 0x00c7: 0x0086,
		0x00c8: 0x0087, 0x00c9: 0x0086, 0x00ca: 0x0086, 0x00cb: 0x0086, 0x00cc: 0x0086, 0x00ce: 0x0086,
		0x00cf: 0x0086, 0x00d1: 0x0086, 0x00d2: 0x0086, 0x00d3: 0x0086, 0x00d4: 0x0086, 0x00d5: 0x0086,
		0x00d6: 0x0087, 0x00d7: 0x0086, 0x00d8: 0x0086, 0x00d9: 0x0087, 0x00da: 0x0086, 0x00db: 0x0086,
		0x00dc: 0x0086, 0x00dd: 0x0086, 0x00de: 0x0086, 0x00df: 0x0086, 0x00e0: 0x0086, 0x00e1: 0x0086,
		0x00e2: 0x0086, 0x00e3: 0x0086, 0x00e4: 0x0086, 0x00e7: 0x0086, 0x00e8: 0x0086, 0x00ea: 0x0086,
		0x00eb: 0x0086, 0x00ec: 0x0086, 0x00ed: 0x0086, 0x00ee: 0x0086, 0x00f3: 0x00f2, 0x00f4: 0x00f2,
		0x00f5: 0x00f2, 0x00f6: 0x00f2, 0x00f7: 0x00f2, 0x00f8: 0x00f2, 0x00f9: 0x00f2, 0x00fa: 0x00f2,
		0x00fb: 0x00f2, 0x00fd: 0x00f2, 0x0100: 0x00f2, 0x0101: 0x00f2, 0x0103: 0x00f2, 0x0104: 0x00f2,
		0x0105: 0x00f2, 0x0106: 0x00f2, 0x0108: 0x00f2, 0x0109: 0x00f2, 0x010a: 0x00f2, 0x010b: 0x00f2,
		0x010c: 0x00f2, 0x010d: 0x00f2, 0x0118: 0x02e2, 0x021e: 0x0237, 0x0233: 0x0237, 0x0245: 0x02e2,
		0x0251: 0x025a, 0x0253: 0x025a, 0x0254: 0x025a, 0x0255: 0x025a, 0x0256: 0x025a, 0x0257: 0x025a,
		0x0258: 0x025a, 0x0259: 0x025a, 0x025b: 0x025a, 0x025c: 0x025a, 0x0285: 0x02e2, 0x0292: 0x02e2,
		0x02af: 0x02e2, 0x02e7: 0x02e2, 0x02e9: 0x02e2, 0x02ee: 0x02e2, 0x030a: 0x02e2, 0x0316: 0x02e2,
		0x0318: 0x0317,
	}

	for child, expectedParent := range expected {
		if parent := parentLocaleTags.parentID(child); parent != expectedParent {
			t.Errorf("unexpected parent id for child id %#x: %#x", child, parent)
		}
	}
}
