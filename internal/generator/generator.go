package generator

import (
	"fmt"
	"os"
	"path/filepath"
	"sort"
	"strings"
)

type Options struct {
	OutputDirectory string
	PackageName     string
	Header          string
}

type Generator struct {
	outputDir   string
	packageName string
	headerLines []string
}

func New(opts Options) (*Generator, error) {
	info, err := os.Stat(opts.OutputDirectory)
	switch {
	case err != nil:
		if os.IsNotExist(err) {
			return nil, fmt.Errorf("directory not found: %s", opts.OutputDirectory)
		}
		return nil, err
	case !info.IsDir():
		return nil, fmt.Errorf("not a directory: %s", opts.OutputDirectory)
	}

	return &Generator{
		outputDir:   opts.OutputDirectory,
		packageName: opts.PackageName,
		headerLines: strings.Split(opts.Header, "\n"),
	}, nil
}

func (g *Generator) GenerateFile(filename string, snippet Snippet) error {
	ext := filepath.Ext(filename)
	codeFilename := filepath.Join(g.outputDir, filename)
	testFilename := strings.TrimSuffix(codeFilename, ext) + "_test" + ext

	err := g.printGoFile(snippet, codeFilename)
	if err != nil {
		return err
	}

	if testSnippet := testSnippetOf(snippet); testSnippet != nil {
		err = g.printGoFile(testSnippetAsSnippet{testSnippet}, testFilename)
		if err != nil {
			return err
		}
	}
	return nil
}

func (g *Generator) GenerateFiles(snippets map[string]Snippet) error {
	for filename, snippet := range snippets {
		if err := g.GenerateFile(filename, snippet); err != nil {
			return err
		}
	}
	return nil
}

func (g *Generator) printGoFile(snippet Snippet, filename string) error {
	f, err := os.Create(filename)
	if err != nil {
		return err
	}
	defer f.Close()

	p := newPrinter(f)

	p.Println(`// This file was generated by the 'generate' command. Do not edit.`)
	for _, headerLine := range g.headerLines {
		p.Println(`// `, headerLine)
	}
	p.Println()
	p.Println(`package `, g.packageName)
	p.Println()
	if imports := snippet.Imports(); len(imports) != 0 {
		sort.Strings(imports)
		p.Println(`import (`)
		for _, imp := range imports {
			p.Println(`	"`, imp, `"`)
		}
		p.Println(`)`)
		p.Println()
	}
	snippet.Generate(p)
	return p.Err()
}

type testSnippetAsSnippet struct {
	TestSnippet
}

func (t testSnippetAsSnippet) Imports() []string   { return t.TestImports() }
func (t testSnippetAsSnippet) Generate(p *Printer) { t.GenerateTest(p) }
