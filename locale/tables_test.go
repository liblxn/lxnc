// This file was generated by the 'generate' command. Do not edit.
// CLDR version: 44

package locale

import (
	"reflect"
	"strings"
	"testing"
)

func TestLangTags(t *testing.T) {
	expected := map[langID]string{ // lang id => string
		0x0001: "aa ", 0x0002: "ab ", 0x0003: "af ", 0x0004: "agq", 0x0005: "ak ",
		0x0006: "am ", 0x0007: "an ", 0x0008: "ann", 0x0009: "apc", 0x000a: "ar ",
		0x000b: "arn", 0x000c: "as ", 0x000d: "asa", 0x000e: "ast", 0x000f: "az ",
		0x0010: "ba ", 0x0011: "bal", 0x0012: "bas", 0x0013: "be ", 0x0014: "bem",
		0x0015: "bew", 0x0016: "bez", 0x0017: "bg ", 0x0018: "bgc", 0x0019: "bgn",
		0x001a: "bho", 0x001b: "blo", 0x001c: "blt", 0x001d: "bm ", 0x001e: "bn ",
		0x001f: "bo ", 0x0020: "br ", 0x0021: "brx", 0x0022: "bs ", 0x0023: "bss",
		0x0024: "byn", 0x0025: "ca ", 0x0026: "cad", 0x0027: "cch", 0x0028: "ccp",
		0x0029: "ce ", 0x002a: "ceb", 0x002b: "cgg", 0x002c: "cho", 0x002d: "chr",
		0x002e: "cic", 0x002f: "ckb", 0x0030: "co ", 0x0031: "cs ", 0x0032: "csw",
		0x0033: "cu ", 0x0034: "cv ", 0x0035: "cy ", 0x0036: "da ", 0x0037: "dav",
		0x0038: "de ", 0x0039: "dje", 0x003a: "doi", 0x003b: "dsb", 0x003c: "dua",
		0x003d: "dv ", 0x003e: "dyo", 0x003f: "dz ", 0x0040: "ebu", 0x0041: "ee ",
		0x0042: "el ", 0x0043: "en ", 0x0044: "eo ", 0x0045: "es ", 0x0046: "et ",
		0x0047: "eu ", 0x0048: "ewo", 0x0049: "fa ", 0x004a: "ff ", 0x004b: "fi ",
		0x004c: "fil", 0x004d: "fo ", 0x004e: "fr ", 0x004f: "frr", 0x0050: "fur",
		0x0051: "fy ", 0x0052: "ga ", 0x0053: "gaa", 0x0054: "gd ", 0x0055: "gez",
		0x0056: "gl ", 0x0057: "gn ", 0x0058: "gsw", 0x0059: "gu ", 0x005a: "guz",
		0x005b: "gv ", 0x005c: "ha ", 0x005d: "haw", 0x005e: "he ", 0x005f: "hi ",
		0x0060: "hnj", 0x0061: "hr ", 0x0062: "hsb", 0x0063: "hu ", 0x0064: "hy ",
		0x0065: "ia ", 0x0066: "id ", 0x0067: "ie ", 0x0068: "ig ", 0x0069: "ii ",
		0x006a: "io ", 0x006b: "is ", 0x006c: "it ", 0x006d: "iu ", 0x006e: "ja ",
		0x006f: "jbo", 0x0070: "jgo", 0x0071: "jmc", 0x0072: "jv ", 0x0073: "ka ",
		0x0074: "kab", 0x0075: "kaj", 0x0076: "kam", 0x0077: "kcg", 0x0078: "kde",
		0x0079: "kea", 0x007a: "ken", 0x007b: "kgp", 0x007c: "khq", 0x007d: "ki ",
		0x007e: "kk ", 0x007f: "kkj", 0x0080: "kl ", 0x0081: "kln", 0x0082: "km ",
		0x0083: "kn ", 0x0084: "ko ", 0x0085: "kok", 0x0086: "kpe", 0x0087: "ks ",
		0x0088: "ksb", 0x0089: "ksf", 0x008a: "ksh", 0x008b: "ku ", 0x008c: "kw ",
		0x008d: "kxv", 0x008e: "ky ", 0x008f: "la ", 0x0090: "lag", 0x0091: "lb ",
		0x0092: "lg ", 0x0093: "lij", 0x0094: "lkt", 0x0095: "lmo", 0x0096: "ln ",
		0x0097: "lo ", 0x0098: "lrc", 0x0099: "lt ", 0x009a: "lu ", 0x009b: "luo",
		0x009c: "luy", 0x009d: "lv ", 0x009e: "mai", 0x009f: "mas", 0x00a0: "mdf",
		0x00a1: "mer", 0x00a2: "mfe", 0x00a3: "mg ", 0x00a4: "mgh", 0x00a5: "mgo",
		0x00a6: "mi ", 0x00a7: "mic", 0x00a8: "mk ", 0x00a9: "ml ", 0x00aa: "mn ",
		0x00ab: "mni", 0x00ac: "moh", 0x00ad: "mr ", 0x00ae: "ms ", 0x00af: "mt ",
		0x00b0: "mua", 0x00b1: "mus", 0x00b2: "my ", 0x00b3: "myv", 0x00b4: "mzn",
		0x00b5: "naq", 0x00b6: "nb ", 0x00b7: "nd ", 0x00b8: "nds", 0x00b9: "ne ",
		0x00ba: "nl ", 0x00bb: "nmg", 0x00bc: "nn ", 0x00bd: "nnh", 0x00be: "no ",
		0x00bf: "nqo", 0x00c0: "nr ", 0x00c1: "nso", 0x00c2: "nus", 0x00c3: "nv ",
		0x00c4: "ny ", 0x00c5: "nyn", 0x00c6: "oc ", 0x00c7: "om ", 0x00c8: "or ",
		0x00c9: "os ", 0x00ca: "osa", 0x00cb: "pa ", 0x00cc: "pap", 0x00cd: "pcm",
		0x00ce: "pis", 0x00cf: "pl ", 0x00d0: "prg", 0x00d1: "ps ", 0x00d2: "pt ",
		0x00d3: "qu ", 0x00d4: "quc", 0x00d5: "raj", 0x00d6: "rhg", 0x00d7: "rif",
		0x00d8: "rm ", 0x00d9: "rn ", 0x00da: "ro ", 0x00db: "rof", 0x00dc: "ru ",
		0x00dd: "rw ", 0x00de: "rwk", 0x00df: "sa ", 0x00e0: "sah", 0x00e1: "saq",
		0x00e2: "sat", 0x00e3: "sbp", 0x00e4: "sc ", 0x00e5: "scn", 0x00e6: "sd ",
		0x00e7: "sdh", 0x00e8: "se ", 0x00e9: "seh", 0x00ea: "ses", 0x00eb: "sg ",
		0x00ec: "shi", 0x00ed: "shn", 0x00ee: "si ", 0x00ef: "sid", 0x00f0: "sk ",
		0x00f1: "skr", 0x00f2: "sl ", 0x00f3: "sma", 0x00f4: "smj", 0x00f5: "smn",
		0x00f6: "sms", 0x00f7: "sn ", 0x00f8: "so ", 0x00f9: "sq ", 0x00fa: "sr ",
		0x00fb: "ss ", 0x00fc: "ssy", 0x00fd: "st ", 0x00fe: "su ", 0x00ff: "sv ",
		0x0100: "sw ", 0x0101: "syr", 0x0102: "szl", 0x0103: "ta ", 0x0104: "te ",
		0x0105: "teo", 0x0106: "tg ", 0x0107: "th ", 0x0108: "ti ", 0x0109: "tig",
		0x010a: "tk ", 0x010b: "tn ", 0x010c: "to ", 0x010d: "tok", 0x010e: "tpi",
		0x010f: "tr ", 0x0110: "trv", 0x0111: "trw", 0x0112: "ts ", 0x0113: "tt ",
		0x0114: "twq", 0x0115: "tyv", 0x0116: "tzm", 0x0117: "ug ", 0x0118: "uk ",
		0x0119: "und", 0x011a: "ur ", 0x011b: "uz ", 0x011c: "vai", 0x011d: "ve ",
		0x011e: "vec", 0x011f: "vi ", 0x0120: "vmw", 0x0121: "vo ", 0x0122: "vun",
		0x0123: "wa ", 0x0124: "wae", 0x0125: "wal", 0x0126: "wbp", 0x0127: "wo ",
		0x0128: "xh ", 0x0129: "xnr", 0x012a: "xog", 0x012b: "yav", 0x012c: "yi ",
		0x012d: "yo ", 0x012e: "yrl", 0x012f: "yue", 0x0130: "za ", 0x0131: "zgh",
		0x0132: "zh ", 0x0133: "zu ",
	}

	for id, str := range expected {
		if s := langTags.lang(id); s != strings.TrimSpace(str) {
			t.Fatalf("unexpected string for id %d: %q", uint(id), s)
		}
	}
}

func TestScriptTags(t *testing.T) {
	expected := map[scriptID]string{ // script id => string
		0x01: "Adlm", 0x02: "Arab", 0x03: "Beng", 0x04: "Cyrl", 0x05: "Deva",
		0x06: "Dsrt", 0x07: "Guru", 0x08: "Hans", 0x09: "Hant", 0x0a: "Hmnp",
		0x0b: "Latn", 0x0c: "Mong", 0x0d: "Mtei", 0x0e: "Nkoo", 0x0f: "Olck",
		0x10: "Orya", 0x11: "Rohg", 0x12: "Shaw", 0x13: "Telu", 0x14: "Tfng",
		0x15: "Vaii",
	}

	for id, str := range expected {
		if s := scriptTags.script(id); s != strings.TrimSpace(str) {
			t.Fatalf("unexpected string for id %d: %q", uint(id), s)
		}
	}
}

func TestRegionTags(t *testing.T) {
	expected := map[regionID]string{ // region id => string
		0x01: "001", 0x02: "150", 0x03: "419", 0x04: "AD ", 0x05: "AE ", 0x06: "AF ",
		0x07: "AG ", 0x08: "AI ", 0x09: "AL ", 0x0a: "AM ", 0x0b: "AO ", 0x0c: "AR ",
		0x0d: "AS ", 0x0e: "AT ", 0x0f: "AU ", 0x10: "AW ", 0x11: "AX ", 0x12: "AZ ",
		0x13: "BA ", 0x14: "BB ", 0x15: "BD ", 0x16: "BE ", 0x17: "BF ", 0x18: "BG ",
		0x19: "BH ", 0x1a: "BI ", 0x1b: "BJ ", 0x1c: "BL ", 0x1d: "BM ", 0x1e: "BN ",
		0x1f: "BO ", 0x20: "BQ ", 0x21: "BR ", 0x22: "BS ", 0x23: "BT ", 0x24: "BW ",
		0x25: "BY ", 0x26: "BZ ", 0x27: "CA ", 0x28: "CC ", 0x29: "CD ", 0x2a: "CF ",
		0x2b: "CG ", 0x2c: "CH ", 0x2d: "CI ", 0x2e: "CK ", 0x2f: "CL ", 0x30: "CM ",
		0x31: "CN ", 0x32: "CO ", 0x33: "CR ", 0x34: "CU ", 0x35: "CV ", 0x36: "CW ",
		0x37: "CX ", 0x38: "CY ", 0x39: "CZ ", 0x3a: "DE ", 0x3b: "DG ", 0x3c: "DJ ",
		0x3d: "DK ", 0x3e: "DM ", 0x3f: "DO ", 0x40: "DZ ", 0x41: "EA ", 0x42: "EC ",
		0x43: "EE ", 0x44: "EG ", 0x45: "EH ", 0x46: "ER ", 0x47: "ES ", 0x48: "ET ",
		0x49: "FI ", 0x4a: "FJ ", 0x4b: "FK ", 0x4c: "FM ", 0x4d: "FO ", 0x4e: "FR ",
		0x4f: "GA ", 0x50: "GB ", 0x51: "GD ", 0x52: "GE ", 0x53: "GF ", 0x54: "GG ",
		0x55: "GH ", 0x56: "GI ", 0x57: "GL ", 0x58: "GM ", 0x59: "GN ", 0x5a: "GP ",
		0x5b: "GQ ", 0x5c: "GR ", 0x5d: "GT ", 0x5e: "GU ", 0x5f: "GW ", 0x60: "GY ",
		0x61: "HK ", 0x62: "HN ", 0x63: "HR ", 0x64: "HT ", 0x65: "HU ", 0x66: "IC ",
		0x67: "ID ", 0x68: "IE ", 0x69: "IL ", 0x6a: "IM ", 0x6b: "IN ", 0x6c: "IO ",
		0x6d: "IQ ", 0x6e: "IR ", 0x6f: "IS ", 0x70: "IT ", 0x71: "JE ", 0x72: "JM ",
		0x73: "JO ", 0x74: "JP ", 0x75: "KE ", 0x76: "KG ", 0x77: "KH ", 0x78: "KI ",
		0x79: "KM ", 0x7a: "KN ", 0x7b: "KP ", 0x7c: "KR ", 0x7d: "KW ", 0x7e: "KY ",
		0x7f: "KZ ", 0x80: "LA ", 0x81: "LB ", 0x82: "LC ", 0x83: "LI ", 0x84: "LK ",
		0x85: "LR ", 0x86: "LS ", 0x87: "LT ", 0x88: "LU ", 0x89: "LV ", 0x8a: "LY ",
		0x8b: "MA ", 0x8c: "MC ", 0x8d: "MD ", 0x8e: "ME ", 0x8f: "MF ", 0x90: "MG ",
		0x91: "MH ", 0x92: "MK ", 0x93: "ML ", 0x94: "MM ", 0x95: "MN ", 0x96: "MO ",
		0x97: "MP ", 0x98: "MQ ", 0x99: "MR ", 0x9a: "MS ", 0x9b: "MT ", 0x9c: "MU ",
		0x9d: "MV ", 0x9e: "MW ", 0x9f: "MX ", 0xa0: "MY ", 0xa1: "MZ ", 0xa2: "NA ",
		0xa3: "NC ", 0xa4: "NE ", 0xa5: "NF ", 0xa6: "NG ", 0xa7: "NI ", 0xa8: "NL ",
		0xa9: "NO ", 0xaa: "NP ", 0xab: "NR ", 0xac: "NU ", 0xad: "NZ ", 0xae: "OM ",
		0xaf: "PA ", 0xb0: "PE ", 0xb1: "PF ", 0xb2: "PG ", 0xb3: "PH ", 0xb4: "PK ",
		0xb5: "PL ", 0xb6: "PM ", 0xb7: "PN ", 0xb8: "PR ", 0xb9: "PS ", 0xba: "PT ",
		0xbb: "PW ", 0xbc: "PY ", 0xbd: "QA ", 0xbe: "RE ", 0xbf: "RO ", 0xc0: "RS ",
		0xc1: "RU ", 0xc2: "RW ", 0xc3: "SA ", 0xc4: "SB ", 0xc5: "SC ", 0xc6: "SD ",
		0xc7: "SE ", 0xc8: "SG ", 0xc9: "SH ", 0xca: "SI ", 0xcb: "SJ ", 0xcc: "SK ",
		0xcd: "SL ", 0xce: "SM ", 0xcf: "SN ", 0xd0: "SO ", 0xd1: "SR ", 0xd2: "SS ",
		0xd3: "ST ", 0xd4: "SV ", 0xd5: "SX ", 0xd6: "SY ", 0xd7: "SZ ", 0xd8: "TC ",
		0xd9: "TD ", 0xda: "TG ", 0xdb: "TH ", 0xdc: "TJ ", 0xdd: "TK ", 0xde: "TL ",
		0xdf: "TM ", 0xe0: "TN ", 0xe1: "TO ", 0xe2: "TR ", 0xe3: "TT ", 0xe4: "TV ",
		0xe5: "TW ", 0xe6: "TZ ", 0xe7: "UA ", 0xe8: "UG ", 0xe9: "UM ", 0xea: "US ",
		0xeb: "UY ", 0xec: "UZ ", 0xed: "VA ", 0xee: "VC ", 0xef: "VE ", 0xf0: "VG ",
		0xf1: "VI ", 0xf2: "VN ", 0xf3: "VU ", 0xf4: "WF ", 0xf5: "WS ", 0xf6: "XK ",
		0xf7: "YE ", 0xf8: "YT ", 0xf9: "ZA ", 0xfa: "ZM ", 0xfb: "ZW ",
	}

	for id, str := range expected {
		if s := regionTags.region(id); s != strings.TrimSpace(str) {
			t.Fatalf("unexpected string for id %d: %q", uint(id), s)
		}
	}
}

func TestRegionContainments(t *testing.T) {
	expected := map[string][]regionID{ // child region => parent region ids
		"AC": {0x01, 0x00}, "AD": {0x02, 0x01}, "AE": {0x01, 0x00}, "AF": {0x01, 0x00},
		"AG": {0x03, 0x01}, "AI": {0x03, 0x01}, "AL": {0x02, 0x01}, "AM": {0x01, 0x00},
		"AO": {0x01, 0x00}, "AQ": {0x01, 0x00}, "AR": {0x03, 0x01}, "AS": {0x01, 0x00},
		"AT": {0x02, 0x01}, "AU": {0x01, 0x00}, "AW": {0x03, 0x01}, "AX": {0x02, 0x01},
		"AZ": {0x01, 0x00}, "BA": {0x02, 0x01}, "BB": {0x03, 0x01}, "BD": {0x01, 0x00},
		"BE": {0x02, 0x01}, "BF": {0x01, 0x00}, "BG": {0x02, 0x01}, "BH": {0x01, 0x00},
		"BI": {0x01, 0x00}, "BJ": {0x01, 0x00}, "BL": {0x03, 0x01}, "BM": {0x01, 0x00},
		"BN": {0x01, 0x00}, "BO": {0x03, 0x01}, "BQ": {0x03, 0x01}, "BR": {0x03, 0x01},
		"BS": {0x03, 0x01}, "BT": {0x01, 0x00}, "BV": {0x03, 0x01}, "BW": {0x01, 0x00},
		"BY": {0x02, 0x01}, "BZ": {0x03, 0x01}, "CA": {0x01, 0x00}, "CC": {0x01, 0x00},
		"CD": {0x01, 0x00}, "CF": {0x01, 0x00}, "CG": {0x01, 0x00}, "CH": {0x02, 0x01},
		"CI": {0x01, 0x00}, "CK": {0x01, 0x00}, "CL": {0x03, 0x01}, "CM": {0x01, 0x00},
		"CN": {0x01, 0x00}, "CO": {0x03, 0x01}, "CP": {0x01, 0x00}, "CQ": {0x02, 0x01},
		"CR": {0x03, 0x01}, "CU": {0x03, 0x01}, "CV": {0x01, 0x00}, "CW": {0x03, 0x01},
		"CX": {0x01, 0x00}, "CY": {0x01, 0x00}, "CZ": {0x02, 0x01}, "DE": {0x02, 0x01},
		"DG": {0x01, 0x00}, "DJ": {0x01, 0x00}, "DK": {0x02, 0x01}, "DM": {0x03, 0x01},
		"DO": {0x03, 0x01}, "DZ": {0x01, 0x00}, "EA": {0x01, 0x00}, "EC": {0x03, 0x01},
		"EE": {0x02, 0x01}, "EG": {0x01, 0x00}, "EH": {0x01, 0x00}, "ER": {0x01, 0x00},
		"ES": {0x02, 0x01}, "ET": {0x01, 0x00}, "FI": {0x02, 0x01}, "FJ": {0x01, 0x00},
		"FK": {0x03, 0x01}, "FM": {0x01, 0x00}, "FO": {0x02, 0x01}, "FR": {0x02, 0x01},
		"GA": {0x01, 0x00}, "GB": {0x02, 0x01}, "GD": {0x03, 0x01}, "GE": {0x01, 0x00},
		"GF": {0x03, 0x01}, "GG": {0x02, 0x01}, "GH": {0x01, 0x00}, "GI": {0x02, 0x01},
		"GL": {0x01, 0x00}, "GM": {0x01, 0x00}, "GN": {0x01, 0x00}, "GP": {0x03, 0x01},
		"GQ": {0x01, 0x00}, "GR": {0x02, 0x01}, "GS": {0x03, 0x01}, "GT": {0x03, 0x01},
		"GU": {0x01, 0x00}, "GW": {0x01, 0x00}, "GY": {0x03, 0x01}, "HK": {0x01, 0x00},
		"HM": {0x01, 0x00}, "HN": {0x03, 0x01}, "HR": {0x02, 0x01}, "HT": {0x03, 0x01},
		"HU": {0x02, 0x01}, "IC": {0x01, 0x00}, "ID": {0x01, 0x00}, "IE": {0x02, 0x01},
		"IL": {0x01, 0x00}, "IM": {0x02, 0x01}, "IN": {0x01, 0x00}, "IO": {0x01, 0x00},
		"IQ": {0x01, 0x00}, "IR": {0x01, 0x00}, "IS": {0x02, 0x01}, "IT": {0x02, 0x01},
		"JE": {0x02, 0x01}, "JM": {0x03, 0x01}, "JO": {0x01, 0x00}, "JP": {0x01, 0x00},
		"KE": {0x01, 0x00}, "KG": {0x01, 0x00}, "KH": {0x01, 0x00}, "KI": {0x01, 0x00},
		"KM": {0x01, 0x00}, "KN": {0x03, 0x01}, "KP": {0x01, 0x00}, "KR": {0x01, 0x00},
		"KW": {0x01, 0x00}, "KY": {0x03, 0x01}, "KZ": {0x01, 0x00}, "LA": {0x01, 0x00},
		"LB": {0x01, 0x00}, "LC": {0x03, 0x01}, "LI": {0x02, 0x01}, "LK": {0x01, 0x00},
		"LR": {0x01, 0x00}, "LS": {0x01, 0x00}, "LT": {0x02, 0x01}, "LU": {0x02, 0x01},
		"LV": {0x02, 0x01}, "LY": {0x01, 0x00}, "MA": {0x01, 0x00}, "MC": {0x02, 0x01},
		"MD": {0x02, 0x01}, "ME": {0x02, 0x01}, "MF": {0x03, 0x01}, "MG": {0x01, 0x00},
		"MH": {0x01, 0x00}, "MK": {0x02, 0x01}, "ML": {0x01, 0x00}, "MM": {0x01, 0x00},
		"MN": {0x01, 0x00}, "MO": {0x01, 0x00}, "MP": {0x01, 0x00}, "MQ": {0x03, 0x01},
		"MR": {0x01, 0x00}, "MS": {0x03, 0x01}, "MT": {0x02, 0x01}, "MU": {0x01, 0x00},
		"MV": {0x01, 0x00}, "MW": {0x01, 0x00}, "MX": {0x03, 0x01}, "MY": {0x01, 0x00},
		"MZ": {0x01, 0x00}, "NA": {0x01, 0x00}, "NC": {0x01, 0x00}, "NE": {0x01, 0x00},
		"NF": {0x01, 0x00}, "NG": {0x01, 0x00}, "NI": {0x03, 0x01}, "NL": {0x02, 0x01},
		"NO": {0x02, 0x01}, "NP": {0x01, 0x00}, "NR": {0x01, 0x00}, "NU": {0x01, 0x00},
		"NZ": {0x01, 0x00}, "OM": {0x01, 0x00}, "PA": {0x03, 0x01}, "PE": {0x03, 0x01},
		"PF": {0x01, 0x00}, "PG": {0x01, 0x00}, "PH": {0x01, 0x00}, "PK": {0x01, 0x00},
		"PL": {0x02, 0x01}, "PM": {0x01, 0x00}, "PN": {0x01, 0x00}, "PR": {0x03, 0x01},
		"PS": {0x01, 0x00}, "PT": {0x02, 0x01}, "PW": {0x01, 0x00}, "PY": {0x03, 0x01},
		"QA": {0x01, 0x00}, "RE": {0x01, 0x00}, "RO": {0x02, 0x01}, "RS": {0x02, 0x01},
		"RU": {0x02, 0x01}, "RW": {0x01, 0x00}, "SA": {0x01, 0x00}, "SB": {0x01, 0x00},
		"SC": {0x01, 0x00}, "SD": {0x01, 0x00}, "SE": {0x02, 0x01}, "SG": {0x01, 0x00},
		"SH": {0x01, 0x00}, "SI": {0x02, 0x01}, "SJ": {0x02, 0x01}, "SK": {0x02, 0x01},
		"SL": {0x01, 0x00}, "SM": {0x02, 0x01}, "SN": {0x01, 0x00}, "SO": {0x01, 0x00},
		"SR": {0x03, 0x01}, "SS": {0x01, 0x00}, "ST": {0x01, 0x00}, "SV": {0x03, 0x01},
		"SX": {0x03, 0x01}, "SY": {0x01, 0x00}, "SZ": {0x01, 0x00}, "TA": {0x01, 0x00},
		"TC": {0x03, 0x01}, "TD": {0x01, 0x00}, "TF": {0x01, 0x00}, "TG": {0x01, 0x00},
		"TH": {0x01, 0x00}, "TJ": {0x01, 0x00}, "TK": {0x01, 0x00}, "TL": {0x01, 0x00},
		"TM": {0x01, 0x00}, "TN": {0x01, 0x00}, "TO": {0x01, 0x00}, "TR": {0x01, 0x00},
		"TT": {0x03, 0x01}, "TV": {0x01, 0x00}, "TW": {0x01, 0x00}, "TZ": {0x01, 0x00},
		"UA": {0x02, 0x01}, "UG": {0x01, 0x00}, "UM": {0x01, 0x00}, "US": {0x01, 0x00},
		"UY": {0x03, 0x01}, "UZ": {0x01, 0x00}, "VA": {0x02, 0x01}, "VC": {0x03, 0x01},
		"VE": {0x03, 0x01}, "VG": {0x03, 0x01}, "VI": {0x03, 0x01}, "VN": {0x01, 0x00},
		"VU": {0x01, 0x00}, "WF": {0x01, 0x00}, "WS": {0x01, 0x00}, "XK": {0x02, 0x01},
		"YE": {0x01, 0x00}, "YT": {0x01, 0x00}, "ZA": {0x01, 0x00}, "ZM": {0x01, 0x00},
		"ZW": {0x01, 0x00},
	}

	for child, expectedParents := range expected {
		expectedN := 2
		for expectedParents[expectedN-1] == 0 {
			expectedN--
		}

		var parents [2]regionID
		n := regionContainments.containmentIDs([]byte(child), parents[:])
		switch {
		case n != expectedN:
			t.Errorf("unexpected number of parents for %s: %d (expected %d)", child, n, expectedN)
		case reflect.DeepEqual(parents, expectedParents):
			t.Errorf("unexpected parents: %v (expected %v)", parents, expectedParents)
		}
	}
}

func TestLocaleTags(t *testing.T) {
	expected := map[tagID]tag{ // tag id => tag id
		0x0001: 0x00010000, 0x0002: 0x0001003c, 0x0003: 0x00010046, 0x0004: 0x00010048, 0x0005: 0x00020000,
		0x0006: 0x00020052, 0x0007: 0x00030000, 0x0008: 0x000300a2, 0x0009: 0x000300f9, 0x000a: 0x00040000,
		0x000b: 0x00040030, 0x000c: 0x00050000, 0x000d: 0x00050055, 0x000e: 0x00060000, 0x000f: 0x00060048,
		0x0010: 0x00070000, 0x0011: 0x00070047, 0x0012: 0x00080000, 0x0013: 0x000800a6, 0x0014: 0x00090000,
		0x0015: 0x000900d6, 0x0016: 0x000a0000, 0x0017: 0x000a0001, 0x0018: 0x000a0005, 0x0019: 0x000a0019,
		0x001a: 0x000a003c, 0x001b: 0x000a0040, 0x001c: 0x000a0044, 0x001d: 0x000a0045, 0x001e: 0x000a0046,
		0x001f: 0x000a0069, 0x0020: 0x000a006d, 0x0021: 0x000a0073, 0x0022: 0x000a0079, 0x0023: 0x000a007d,
		0x0024: 0x000a0081, 0x0025: 0x000a008a, 0x0026: 0x000a008b, 0x0027: 0x000a0099, 0x0028: 0x000a00ae,
		0x0029: 0x000a00b9, 0x002a: 0x000a00bd, 0x002b: 0x000a00c3, 0x002c: 0x000a00c6, 0x002d: 0x000a00d0,
		0x002e: 0x000a00d2, 0x002f: 0x000a00d6, 0x0030: 0x000a00d9, 0x0031: 0x000a00e0, 0x0032: 0x000a00f7,
		0x0033: 0x000b0000, 0x0034: 0x000b002f, 0x0035: 0x000c0000, 0x0036: 0x000c006b, 0x0037: 0x000d0000,
		0x0038: 0x000d00e6, 0x0039: 0x000e0000, 0x003a: 0x000e0047, 0x003b: 0x000f0000, 0x003c: 0x000f0200,
		0x003d: 0x000f026d, 0x003e: 0x000f026e, 0x003f: 0x000f02e2, 0x0040: 0x000f0400, 0x0041: 0x000f0412,
		0x0042: 0x000f0b00, 0x0043: 0x000f0b12, 0x0044: 0x00100000, 0x0045: 0x001000c1, 0x0046: 0x00110000,
		0x0047: 0x00110200, 0x0048: 0x001102b4, 0x0049: 0x00110b00, 0x004a: 0x00110bb4, 0x004b: 0x00120000,
		0x004c: 0x00120030, 0x004d: 0x00130000, 0x004e: 0x00130025, 0x004f: 0x00140000, 0x0050: 0x001400fa,
		0x0051: 0x00150000, 0x0052: 0x00150067, 0x0053: 0x00160000, 0x0054: 0x001600e6, 0x0055: 0x00170000,
		0x0056: 0x00170018, 0x0057: 0x00180000, 0x0058: 0x0018006b, 0x0059: 0x00190000, 0x005a: 0x00190005,
		0x005b: 0x00190006, 0x005c: 0x0019006e, 0x005d: 0x001900ae, 0x005e: 0x001900b4, 0x005f: 0x001a0000,
		0x0060: 0x001a006b, 0x0061: 0x001b0000, 0x0062: 0x001b001b, 0x0063: 0x001c0000, 0x0064: 0x001c00f2,
		0x0065: 0x001d0000, 0x0066: 0x001d0093, 0x0067: 0x001d0e00, 0x0068: 0x001d0e93, 0x0069: 0x001e0000,
		0x006a: 0x001e0015, 0x006b: 0x001e006b, 0x006c: 0x001f0000, 0x006d: 0x001f0031, 0x006e: 0x001f006b,
		0x006f: 0x00200000, 0x0070: 0x0020004e, 0x0071: 0x00210000, 0x0072: 0x0021006b, 0x0073: 0x00220000,
		0x0074: 0x00220400, 0x0075: 0x00220413, 0x0076: 0x00220b00, 0x0077: 0x00220b13, 0x0078: 0x00230000,
		0x0079: 0x00230030, 0x007a: 0x00240000, 0x007b: 0x00240046, 0x007c: 0x00250000, 0x007d: 0x00250004,
		0x007e: 0x00250047, 0x007f: 0x0025004e, 0x0080: 0x00250070, 0x0081: 0x00260000, 0x0082: 0x002600ea,
		0x0083: 0x00270000, 0x0084: 0x002700a6, 0x0085: 0x00280000, 0x0086: 0x00280015, 0x0087: 0x0028006b,
		0x0088: 0x00290000, 0x0089: 0x002900c1, 0x008a: 0x002a0000, 0x008b: 0x002a00b3, 0x008c: 0x002b0000,
		0x008d: 0x002b00e8, 0x008e: 0x002c0000, 0x008f: 0x002c00ea, 0x0090: 0x002d0000, 0x0091: 0x002d00ea,
		0x0092: 0x002e0000, 0x0093: 0x002e00ea, 0x0094: 0x002f0000, 0x0095: 0x002f006d, 0x0096: 0x002f006e,
		0x0097: 0x00300000, 0x0098: 0x0030004e, 0x0099: 0x00310000, 0x009a: 0x00310039, 0x009b: 0x00320000,
		0x009c: 0x00320027, 0x009d: 0x00330000, 0x009e: 0x003300c1, 0x009f: 0x00340000, 0x00a0: 0x003400c1,
		0x00a1: 0x00350000, 0x00a2: 0x00350050, 0x00a3: 0x00360000, 0x00a4: 0x0036003d, 0x00a5: 0x00360057,
		0x00a6: 0x00370000, 0x00a7: 0x00370075, 0x00a8: 0x00380000, 0x00a9: 0x0038000e, 0x00aa: 0x00380016,
		0x00ab: 0x0038002c, 0x00ac: 0x0038003a, 0x00ad: 0x00380070, 0x00ae: 0x00380083, 0x00af: 0x00380088,
		0x00b0: 0x00390000, 0x00b1: 0x003900a4, 0x00b2: 0x003a0000, 0x00b3: 0x003a006b, 0x00b4: 0x003b0000,
		0x00b5: 0x003b003a, 0x00b6: 0x003c0000, 0x00b7: 0x003c0030, 0x00b8: 0x003d0000, 0x00b9: 0x003d009d,
		0x00ba: 0x003e0000, 0x00bb: 0x003e00cf, 0x00bc: 0x003f0000, 0x00bd: 0x003f0023, 0x00be: 0x00400000,
		0x00bf: 0x00400075, 0x00c0: 0x00410000, 0x00c1: 0x00410055, 0x00c2: 0x004100da, 0x00c3: 0x00420000,
		0x00c4: 0x00420038, 0x00c5: 0x0042005c, 0x00c6: 0x00430000, 0x00c7: 0x00430001, 0x00c8: 0x00430002,
		0x00c9: 0x00430005, 0x00ca: 0x00430007, 0x00cb: 0x00430008, 0x00cc: 0x0043000d, 0x00cd: 0x0043000e,
		0x00ce: 0x0043000f, 0x00cf: 0x00430014, 0x00d0: 0x00430016, 0x00d1: 0x0043001a, 0x00d2: 0x0043001d,
		0x00d3: 0x00430022, 0x00d4: 0x00430024, 0x00d5: 0x00430026, 0x00d6: 0x00430027, 0x00d7: 0x00430028,
		0x00d8: 0x0043002c, 0x00d9: 0x0043002e, 0x00da: 0x00430030, 0x00db: 0x00430037, 0x00dc: 0x00430038,
		0x00dd: 0x0043003a, 0x00de: 0x0043003b, 0x00df: 0x0043003d, 0x00e0: 0x0043003e, 0x00e1: 0x00430046,
		0x00e2: 0x00430049, 0x00e3: 0x0043004a, 0x00e4: 0x0043004b, 0x00e5: 0x0043004c, 0x00e6: 0x00430050,
		0x00e7: 0x00430051, 0x00e8: 0x00430054, 0x00e9: 0x00430055, 0x00ea: 0x00430056, 0x00eb: 0x00430058,
		0x00ec: 0x0043005e, 0x00ed: 0x00430060, 0x00ee: 0x00430061, 0x00ef: 0x00430067, 0x00f0: 0x00430068,
		0x00f1: 0x00430069, 0x00f2: 0x0043006a, 0x00f3: 0x0043006b, 0x00f4: 0x0043006c, 0x00f5: 0x00430071,
		0x00f6: 0x00430072, 0x00f7: 0x00430075, 0x00f8: 0x00430078, 0x00f9: 0x0043007a, 0x00fa: 0x0043007e,
		0x00fb: 0x00430082, 0x00fc: 0x00430085, 0x00fd: 0x00430086, 0x00fe: 0x00430090, 0x00ff: 0x00430091,
		0x0100: 0x00430096, 0x0101: 0x00430097, 0x0102: 0x0043009a, 0x0103: 0x0043009b, 0x0104: 0x0043009c,
		0x0105: 0x0043009d, 0x0106: 0x0043009e, 0x0107: 0x004300a0, 0x0108: 0x004300a2, 0x0109: 0x004300a5,
		0x010a: 0x004300a6, 0x010b: 0x004300a8, 0x010c: 0x004300ab, 0x010d: 0x004300ac, 0x010e: 0x004300ad,
		0x010f: 0x004300b2, 0x0110: 0x004300b3, 0x0111: 0x004300b4, 0x0112: 0x004300b7, 0x0113: 0x004300b8,
		0x0114: 0x004300bb, 0x0115: 0x004300c2, 0x0116: 0x004300c4, 0x0117: 0x004300c5, 0x0118: 0x004300c6,
		0x0119: 0x004300c7, 0x011a: 0x004300c8, 0x011b: 0x004300c9, 0x011c: 0x004300ca, 0x011d: 0x004300cd,
		0x011e: 0x004300d2, 0x011f: 0x004300d5, 0x0120: 0x004300d7, 0x0121: 0x004300d8, 0x0122: 0x004300dd,
		0x0123: 0x004300e1, 0x0124: 0x004300e3, 0x0125: 0x004300e4, 0x0126: 0x004300e6, 0x0127: 0x004300e8,
		0x0128: 0x004300e9, 0x0129: 0x004300ea, 0x012a: 0x004300ee, 0x012b: 0x004300f0, 0x012c: 0x004300f1,
		0x012d: 0x004300f3, 0x012e: 0x004300f5, 0x012f: 0x004300f9, 0x0130: 0x004300fa, 0x0131: 0x004300fb,
		0x0132: 0x00430600, 0x0133: 0x004306ea, 0x0134: 0x00431200, 0x0135: 0x00431250, 0x0136: 0x00440000,
		0x0137: 0x00440001, 0x0138: 0x00450000, 0x0139: 0x00450003, 0x013a: 0x0045000c, 0x013b: 0x0045001f,
		0x013c: 0x00450021, 0x013d: 0x00450026, 0x013e: 0x0045002f, 0x013f: 0x00450032, 0x0140: 0x00450033,
		0x0141: 0x00450034, 0x0142: 0x0045003f, 0x0143: 0x00450041, 0x0144: 0x00450042, 0x0145: 0x00450047,
		0x0146: 0x0045005b, 0x0147: 0x0045005d, 0x0148: 0x00450062, 0x0149: 0x00450066, 0x014a: 0x0045009f,
		0x014b: 0x004500a7, 0x014c: 0x004500af, 0x014d: 0x004500b0, 0x014e: 0x004500b3, 0x014f: 0x004500b8,
		0x0150: 0x004500bc, 0x0151: 0x004500d4, 0x0152: 0x004500ea, 0x0153: 0x004500eb, 0x0154: 0x004500ef,
		0x0155: 0x00460000, 0x0156: 0x00460043, 0x0157: 0x00470000, 0x0158: 0x00470047, 0x0159: 0x00480000,
		0x015a: 0x00480030, 0x015b: 0x00490000, 0x015c: 0x00490006, 0x015d: 0x0049006e, 0x015e: 0x004a0000,
		0x015f: 0x004a0100, 0x0160: 0x004a0117, 0x0161: 0x004a0130, 0x0162: 0x004a0155, 0x0163: 0x004a0158,
		0x0164: 0x004a0159, 0x0165: 0x004a015f, 0x0166: 0x004a0185, 0x0167: 0x004a0199, 0x0168: 0x004a01a4,
		0x0169: 0x004a01a6, 0x016a: 0x004a01cd, 0x016b: 0x004a01cf, 0x016c: 0x004a0b00, 0x016d: 0x004a0b17,
		0x016e: 0x004a0b30, 0x016f: 0x004a0b55, 0x0170: 0x004a0b58, 0x0171: 0x004a0b59, 0x0172: 0x004a0b5f,
		0x0173: 0x004a0b85, 0x0174: 0x004a0b99, 0x0175: 0x004a0ba4, 0x0176: 0x004a0ba6, 0x0177: 0x004a0bcd,
		0x0178: 0x004a0bcf, 0x0179: 0x004b0000, 0x017a: 0x004b0049, 0x017b: 0x004c0000, 0x017c: 0x004c00b3,
		0x017d: 0x004d0000, 0x017e: 0x004d003d, 0x017f: 0x004d004d, 0x0180: 0x004e0000, 0x0181: 0x004e0016,
		0x0182: 0x004e0017, 0x0183: 0x004e001a, 0x0184: 0x004e001b, 0x0185: 0x004e001c, 0x0186: 0x004e0027,
		0x0187: 0x004e0029, 0x0188: 0x004e002a, 0x0189: 0x004e002b, 0x018a: 0x004e002c, 0x018b: 0x004e002d,
		0x018c: 0x004e0030, 0x018d: 0x004e003c, 0x018e: 0x004e0040, 0x018f: 0x004e004e, 0x0190: 0x004e004f,
		0x0191: 0x004e0053, 0x0192: 0x004e0059, 0x0193: 0x004e005a, 0x0194: 0x004e005b, 0x0195: 0x004e0064,
		0x0196: 0x004e0079, 0x0197: 0x004e0088, 0x0198: 0x004e008b, 0x0199: 0x004e008c, 0x019a: 0x004e008f,
		0x019b: 0x004e0090, 0x019c: 0x004e0093, 0x019d: 0x004e0098, 0x019e: 0x004e0099, 0x019f: 0x004e009c,
		0x01a0: 0x004e00a3, 0x01a1: 0x004e00a4, 0x01a2: 0x004e00b1, 0x01a3: 0x004e00b6, 0x01a4: 0x004e00be,
		0x01a5: 0x004e00c2, 0x01a6: 0x004e00c5, 0x01a7: 0x004e00cf, 0x01a8: 0x004e00d6, 0x01a9: 0x004e00d9,
		0x01aa: 0x004e00da, 0x01ab: 0x004e00e0, 0x01ac: 0x004e00f3, 0x01ad: 0x004e00f4, 0x01ae: 0x004e00f8,
		0x01af: 0x004f0000, 0x01b0: 0x004f003a, 0x01b1: 0x00500000, 0x01b2: 0x00500070, 0x01b3: 0x00510000,
		0x01b4: 0x005100a8, 0x01b5: 0x00520000, 0x01b6: 0x00520050, 0x01b7: 0x00520068, 0x01b8: 0x00530000,
		0x01b9: 0x00530055, 0x01ba: 0x00540000, 0x01bb: 0x00540050, 0x01bc: 0x00550000, 0x01bd: 0x00550046,
		0x01be: 0x00550048, 0x01bf: 0x00560000, 0x01c0: 0x00560047, 0x01c1: 0x00570000, 0x01c2: 0x005700bc,
		0x01c3: 0x00580000, 0x01c4: 0x0058002c, 0x01c5: 0x0058004e, 0x01c6: 0x00580083, 0x01c7: 0x00590000,
		0x01c8: 0x0059006b, 0x01c9: 0x005a0000, 0x01ca: 0x005a0075, 0x01cb: 0x005b0000, 0x01cc: 0x005b006a,
		0x01cd: 0x005c0000, 0x01ce: 0x005c0055, 0x01cf: 0x005c00a4, 0x01d0: 0x005c00a6, 0x01d1: 0x005c0200,
		0x01d2: 0x005c02a6, 0x01d3: 0x005c02c6, 0x01d4: 0x005d0000, 0x01d5: 0x005d00ea, 0x01d6: 0x005e0000,
		0x01d7: 0x005e0069, 0x01d8: 0x005f0000, 0x01d9: 0x005f006b, 0x01da: 0x005f0b00, 0x01db: 0x005f0b6b,
		0x01dc: 0x00600000, 0x01dd: 0x00600a00, 0x01de: 0x00600aea, 0x01df: 0x00610000, 0x01e0: 0x00610013,
		0x01e1: 0x00610063, 0x01e2: 0x00620000, 0x01e3: 0x0062003a, 0x01e4: 0x00630000, 0x01e5: 0x00630065,
		0x01e6: 0x00640000, 0x01e7: 0x0064000a, 0x01e8: 0x00650000, 0x01e9: 0x00650001, 0x01ea: 0x00660000,
		0x01eb: 0x00660067, 0x01ec: 0x00670000, 0x01ed: 0x00670043, 0x01ee: 0x00680000, 0x01ef: 0x006800a6,
		0x01f0: 0x00690000, 0x01f1: 0x00690031, 0x01f2: 0x006a0000, 0x01f3: 0x006a0001, 0x01f4: 0x006b0000,
		0x01f5: 0x006b006f, 0x01f6: 0x006c0000, 0x01f7: 0x006c002c, 0x01f8: 0x006c0070, 0x01f9: 0x006c00ce,
		0x01fa: 0x006c00ed, 0x01fb: 0x006d0000, 0x01fc: 0x006d0027, 0x01fd: 0x006d0b00, 0x01fe: 0x006d0b27,
		0x01ff: 0x006e0000, 0x0200: 0x006e0074, 0x0201: 0x006f0000, 0x0202: 0x006f0001, 0x0203: 0x00700000,
		0x0204: 0x00700030, 0x0205: 0x00710000, 0x0206: 0x007100e6, 0x0207: 0x00720000, 0x0208: 0x00720067,
		0x0209: 0x00730000, 0x020a: 0x00730052, 0x020b: 0x00740000, 0x020c: 0x00740040, 0x020d: 0x00750000,
		0x020e: 0x007500a6, 0x020f: 0x00760000, 0x0210: 0x00760075, 0x0211: 0x00770000, 0x0212: 0x007700a6,
		0x0213: 0x00780000, 0x0214: 0x007800e6, 0x0215: 0x00790000, 0x0216: 0x00790035, 0x0217: 0x007a0000,
		0x0218: 0x007a0030, 0x0219: 0x007b0000, 0x021a: 0x007b0021, 0x021b: 0x007c0000, 0x021c: 0x007c0093,
		0x021d: 0x007d0000, 0x021e: 0x007d0075, 0x021f: 0x007e0000, 0x0220: 0x007e007f, 0x0221: 0x007f0000,
		0x0222: 0x007f0030, 0x0223: 0x00800000, 0x0224: 0x00800057, 0x0225: 0x00810000, 0x0226: 0x00810075,
		0x0227: 0x00820000, 0x0228: 0x00820077, 0x0229: 0x00830000, 0x022a: 0x0083006b, 0x022b: 0x00840000,
		0x022c: 0x00840031, 0x022d: 0x0084007b, 0x022e: 0x0084007c, 0x022f: 0x00850000, 0x0230: 0x0085006b,
		0x0231: 0x00860000, 0x0232: 0x00860059, 0x0233: 0x00860085, 0x0234: 0x00870000, 0x0235: 0x00870200,
		0x0236: 0x0087026b, 0x0237: 0x00870500, 0x0238: 0x0087056b, 0x0239: 0x00880000, 0x023a: 0x008800e6,
		0x023b: 0x00890000, 0x023c: 0x00890030, 0x023d: 0x008a0000, 0x023e: 0x008a003a, 0x023f: 0x008b0000,
		0x0240: 0x008b00e2, 0x0241: 0x008c0000, 0x0242: 0x008c0050, 0x0243: 0x008d0000, 0x0244: 0x008d0500,
		0x0245: 0x008d056b, 0x0246: 0x008d0b00, 0x0247: 0x008d0b6b, 0x0248: 0x008d1000, 0x0249: 0x008d106b,
		0x024a: 0x008d1300, 0x024b: 0x008d136b, 0x024c: 0x008e0000, 0x024d: 0x008e0076, 0x024e: 0x008f0000,
		0x024f: 0x008f00ed, 0x0250: 0x00900000, 0x0251: 0x009000e6, 0x0252: 0x00910000, 0x0253: 0x00910088,
		0x0254: 0x00920000, 0x0255: 0x009200e8, 0x0256: 0x00930000, 0x0257: 0x00930070, 0x0258: 0x00940000,
		0x0259: 0x009400ea, 0x025a: 0x00950000, 0x025b: 0x00950070, 0x025c: 0x00960000, 0x025d: 0x0096000b,
		0x025e: 0x00960029, 0x025f: 0x0096002a, 0x0260: 0x0096002b, 0x0261: 0x00970000, 0x0262: 0x00970080,
		0x0263: 0x00980000, 0x0264: 0x0098006d, 0x0265: 0x0098006e, 0x0266: 0x00990000, 0x0267: 0x00990087,
		0x0268: 0x009a0000, 0x0269: 0x009a0029, 0x026a: 0x009b0000, 0x026b: 0x009b0075, 0x026c: 0x009c0000,
		0x026d: 0x009c0075, 0x026e: 0x009d0000, 0x026f: 0x009d0089, 0x0270: 0x009e0000, 0x0271: 0x009e006b,
		0x0272: 0x009f0000, 0x0273: 0x009f0075, 0x0274: 0x009f00e6, 0x0275: 0x00a00000, 0x0276: 0x00a000c1,
		0x0277: 0x00a10000, 0x0278: 0x00a10075, 0x0279: 0x00a20000, 0x027a: 0x00a2009c, 0x027b: 0x00a30000,
		0x027c: 0x00a30090, 0x027d: 0x00a40000, 0x027e: 0x00a400a1, 0x027f: 0x00a50000, 0x0280: 0x00a50030,
		0x0281: 0x00a60000, 0x0282: 0x00a600ad, 0x0283: 0x00a70000, 0x0284: 0x00a70027, 0x0285: 0x00a80000,
		0x0286: 0x00a80092, 0x0287: 0x00a90000, 0x0288: 0x00a9006b, 0x0289: 0x00aa0000, 0x028a: 0x00aa0095,
		0x028b: 0x00aa0c00, 0x028c: 0x00aa0c31, 0x028d: 0x00aa0c95, 0x028e: 0x00ab0000, 0x028f: 0x00ab0300,
		0x0290: 0x00ab036b, 0x0291: 0x00ab0d00, 0x0292: 0x00ab0d6b, 0x0293: 0x00ac0000, 0x0294: 0x00ac0027,
		0x0295: 0x00ad0000, 0x0296: 0x00ad006b, 0x0297: 0x00ae0000, 0x0298: 0x00ae001e, 0x0299: 0x00ae0067,
		0x029a: 0x00ae00a0, 0x029b: 0x00ae00c8, 0x029c: 0x00ae0200, 0x029d: 0x00ae021e, 0x029e: 0x00ae02a0,
		0x029f: 0x00af0000, 0x02a0: 0x00af009b, 0x02a1: 0x00b00000, 0x02a2: 0x00b00030, 0x02a3: 0x00b10000,
		0x02a4: 0x00b100ea, 0x02a5: 0x00b20000, 0x02a6: 0x00b20094, 0x02a7: 0x00b30000, 0x02a8: 0x00b300c1,
		0x02a9: 0x00b40000, 0x02aa: 0x00b4006e, 0x02ab: 0x00b50000, 0x02ac: 0x00b500a2, 0x02ad: 0x00b60000,
		0x02ae: 0x00b600a9, 0x02af: 0x00b600cb, 0x02b0: 0x00b70000, 0x02b1: 0x00b700fb, 0x02b2: 0x00b80000,
		0x02b3: 0x00b8003a, 0x02b4: 0x00b800a8, 0x02b5: 0x00b90000, 0x02b6: 0x00b9006b, 0x02b7: 0x00b900aa,
		0x02b8: 0x00ba0000, 0x02b9: 0x00ba0010, 0x02ba: 0x00ba0016, 0x02bb: 0x00ba0020, 0x02bc: 0x00ba0036,
		0x02bd: 0x00ba00a8, 0x02be: 0x00ba00d1, 0x02bf: 0x00ba00d5, 0x02c0: 0x00bb0000, 0x02c1: 0x00bb0030,
		0x02c2: 0x00bc0000, 0x02c3: 0x00bc00a9, 0x02c4: 0x00bd0000, 0x02c5: 0x00bd0030, 0x02c6: 0x00be0000,
		0x02c7: 0x00bf0000, 0x02c8: 0x00bf0059, 0x02c9: 0x00c00000, 0x02ca: 0x00c000f9, 0x02cb: 0x00c10000,
		0x02cc: 0x00c100f9, 0x02cd: 0x00c20000, 0x02ce: 0x00c200d2, 0x02cf: 0x00c30000, 0x02d0: 0x00c300ea,
		0x02d1: 0x00c40000, 0x02d2: 0x00c4009e, 0x02d3: 0x00c50000, 0x02d4: 0x00c500e8, 0x02d5: 0x00c60000,
		0x02d6: 0x00c60047, 0x02d7: 0x00c6004e, 0x02d8: 0x00c70000, 0x02d9: 0x00c70048, 0x02da: 0x00c70075,
		0x02db: 0x00c80000, 0x02dc: 0x00c8006b, 0x02dd: 0x00c90000, 0x02de: 0x00c90052, 0x02df: 0x00c900c1,
		0x02e0: 0x00ca0000, 0x02e1: 0x00ca00ea, 0x02e2: 0x00cb0000, 0x02e3: 0x00cb0200, 0x02e4: 0x00cb02b4,
		0x02e5: 0x00cb0700, 0x02e6: 0x00cb076b, 0x02e7: 0x00cc0000, 0x02e8: 0x00cc0010, 0x02e9: 0x00cc0036,
		0x02ea: 0x00cd0000, 0x02eb: 0x00cd00a6, 0x02ec: 0x00ce0000, 0x02ed: 0x00ce00c4, 0x02ee: 0x00cf0000,
		0x02ef: 0x00cf00b5, 0x02f0: 0x00d00000, 0x02f1: 0x00d000b5, 0x02f2: 0x00d10000, 0x02f3: 0x00d10006,
		0x02f4: 0x00d100b4, 0x02f5: 0x00d20000, 0x02f6: 0x00d2000b, 0x02f7: 0x00d20021, 0x02f8: 0x00d2002c,
		0x02f9: 0x00d20035, 0x02fa: 0x00d2005b, 0x02fb: 0x00d2005f, 0x02fc: 0x00d20088, 0x02fd: 0x00d20096,
		0x02fe: 0x00d200a1, 0x02ff: 0x00d200ba, 0x0300: 0x00d200d3, 0x0301: 0x00d200de, 0x0302: 0x00d30000,
		0x0303: 0x00d3001f, 0x0304: 0x00d30042, 0x0305: 0x00d300b0, 0x0306: 0x00d40000, 0x0307: 0x00d4005d,
		0x0308: 0x00d50000, 0x0309: 0x00d5006b, 0x030a: 0x00d60000, 0x030b: 0x00d61100, 0x030c: 0x00d61115,
		0x030d: 0x00d61194, 0x030e: 0x00d70000, 0x030f: 0x00d7008b, 0x0310: 0x00d80000, 0x0311: 0x00d8002c,
		0x0312: 0x00d90000, 0x0313: 0x00d9001a, 0x0314: 0x00da0000, 0x0315: 0x00da008d, 0x0316: 0x00da00bf,
		0x0317: 0x00db0000, 0x0318: 0x00db00e6, 0x0319: 0x00dc0000, 0x031a: 0x00dc0025, 0x031b: 0x00dc0076,
		0x031c: 0x00dc007f, 0x031d: 0x00dc008d, 0x031e: 0x00dc00c1, 0x031f: 0x00dc00e7, 0x0320: 0x00dd0000,
		0x0321: 0x00dd00c2, 0x0322: 0x00de0000, 0x0323: 0x00de00e6, 0x0324: 0x00df0000, 0x0325: 0x00df006b,
		0x0326: 0x00e00000, 0x0327: 0x00e000c1, 0x0328: 0x00e10000, 0x0329: 0x00e10075, 0x032a: 0x00e20000,
		0x032b: 0x00e20500, 0x032c: 0x00e2056b, 0x032d: 0x00e20f00, 0x032e: 0x00e20f6b, 0x032f: 0x00e30000,
		0x0330: 0x00e300e6, 0x0331: 0x00e40000, 0x0332: 0x00e40070, 0x0333: 0x00e50000, 0x0334: 0x00e50070,
		0x0335: 0x00e60000, 0x0336: 0x00e60200, 0x0337: 0x00e602b4, 0x0338: 0x00e60500, 0x0339: 0x00e6056b,
		0x033a: 0x00e70000, 0x033b: 0x00e7006d, 0x033c: 0x00e7006e, 0x033d: 0x00e80000, 0x033e: 0x00e80049,
		0x033f: 0x00e800a9, 0x0340: 0x00e800c7, 0x0341: 0x00e90000, 0x0342: 0x00e900a1, 0x0343: 0x00ea0000,
		0x0344: 0x00ea0093, 0x0345: 0x00eb0000, 0x0346: 0x00eb002a, 0x0347: 0x00ec0000, 0x0348: 0x00ec0b00,
		0x0349: 0x00ec0b8b, 0x034a: 0x00ec1400, 0x034b: 0x00ec148b, 0x034c: 0x00ed0000, 0x034d: 0x00ed0094,
		0x034e: 0x00ed00db, 0x034f: 0x00ee0000, 0x0350: 0x00ee0084, 0x0351: 0x00ef0000, 0x0352: 0x00ef0048,
		0x0353: 0x00f00000, 0x0354: 0x00f000cc, 0x0355: 0x00f10000, 0x0356: 0x00f100b4, 0x0357: 0x00f20000,
		0x0358: 0x00f200ca, 0x0359: 0x00f30000, 0x035a: 0x00f300a9, 0x035b: 0x00f300c7, 0x035c: 0x00f40000,
		0x035d: 0x00f400a9, 0x035e: 0x00f400c7, 0x035f: 0x00f50000, 0x0360: 0x00f50049, 0x0361: 0x00f60000,
		0x0362: 0x00f60049, 0x0363: 0x00f70000, 0x0364: 0x00f700fb, 0x0365: 0x00f80000, 0x0366: 0x00f8003c,
		0x0367: 0x00f80048, 0x0368: 0x00f80075, 0x0369: 0x00f800d0, 0x036a: 0x00f90000, 0x036b: 0x00f90009,
		0x036c: 0x00f90092, 0x036d: 0x00f900f6, 0x036e: 0x00fa0000, 0x036f: 0x00fa0400, 0x0370: 0x00fa0413,
		0x0371: 0x00fa048e, 0x0372: 0x00fa04c0, 0x0373: 0x00fa04f6, 0x0374: 0x00fa0b00, 0x0375: 0x00fa0b13,
		0x0376: 0x00fa0b8e, 0x0377: 0x00fa0bc0, 0x0378: 0x00fa0bf6, 0x0379: 0x00fb0000, 0x037a: 0x00fb00d7,
		0x037b: 0x00fb00f9, 0x037c: 0x00fc0000, 0x037d: 0x00fc0046, 0x037e: 0x00fd0000, 0x037f: 0x00fd0086,
		0x0380: 0x00fd00f9, 0x0381: 0x00fe0000, 0x0382: 0x00fe0b00, 0x0383: 0x00fe0b67, 0x0384: 0x00ff0000,
		0x0385: 0x00ff0011, 0x0386: 0x00ff0049, 0x0387: 0x00ff00c7, 0x0388: 0x01000000, 0x0389: 0x01000029,
		0x038a: 0x01000075, 0x038b: 0x010000e6, 0x038c: 0x010000e8, 0x038d: 0x01010000, 0x038e: 0x0101006d,
		0x038f: 0x010100d6, 0x0390: 0x01020000, 0x0391: 0x010200b5, 0x0392: 0x01030000, 0x0393: 0x0103006b,
		0x0394: 0x01030084, 0x0395: 0x010300a0, 0x0396: 0x010300c8, 0x0397: 0x01040000, 0x0398: 0x0104006b,
		0x0399: 0x01050000, 0x039a: 0x01050075, 0x039b: 0x010500e8, 0x039c: 0x01060000, 0x039d: 0x010600dc,
		0x039e: 0x01070000, 0x039f: 0x010700db, 0x03a0: 0x01080000, 0x03a1: 0x01080046, 0x03a2: 0x01080048,
		0x03a3: 0x01090000, 0x03a4: 0x01090046, 0x03a5: 0x010a0000, 0x03a6: 0x010a00df, 0x03a7: 0x010b0000,
		0x03a8: 0x010b0024, 0x03a9: 0x010b00f9, 0x03aa: 0x010c0000, 0x03ab: 0x010c00e1, 0x03ac: 0x010d0000,
		0x03ad: 0x010d0001, 0x03ae: 0x010e0000, 0x03af: 0x010e00b2, 0x03b0: 0x010f0000, 0x03b1: 0x010f0038,
		0x03b2: 0x010f00e2, 0x03b3: 0x01100000, 0x03b4: 0x011000e5, 0x03b5: 0x01110000, 0x03b6: 0x011100b4,
		0x03b7: 0x01120000, 0x03b8: 0x011200f9, 0x03b9: 0x01130000, 0x03ba: 0x011300c1, 0x03bb: 0x01140000,
		0x03bc: 0x011400a4, 0x03bd: 0x01150000, 0x03be: 0x011500c1, 0x03bf: 0x01160000, 0x03c0: 0x0116008b,
		0x03c1: 0x01170000, 0x03c2: 0x01170031, 0x03c3: 0x01180000, 0x03c4: 0x011800e7, 0x03c5: 0x01190000,
		0x03c6: 0x011a0000, 0x03c7: 0x011a006b, 0x03c8: 0x011a00b4, 0x03c9: 0x011b0000, 0x03ca: 0x011b0200,
		0x03cb: 0x011b0206, 0x03cc: 0x011b0400, 0x03cd: 0x011b04ec, 0x03ce: 0x011b0b00, 0x03cf: 0x011b0bec,
		0x03d0: 0x011c0000, 0x03d1: 0x011c0b00, 0x03d2: 0x011c0b85, 0x03d3: 0x011c1500, 0x03d4: 0x011c1585,
		0x03d5: 0x011d0000, 0x03d6: 0x011d00f9, 0x03d7: 0x011e0000, 0x03d8: 0x011e0070, 0x03d9: 0x011f0000,
		0x03da: 0x011f00f2, 0x03db: 0x01200000, 0x03dc: 0x012000a1, 0x03dd: 0x01210000, 0x03de: 0x01210001,
		0x03df: 0x01220000, 0x03e0: 0x012200e6, 0x03e1: 0x01230000, 0x03e2: 0x01230016, 0x03e3: 0x01240000,
		0x03e4: 0x0124002c, 0x03e5: 0x01250000, 0x03e6: 0x01250048, 0x03e7: 0x01260000, 0x03e8: 0x0126000f,
		0x03e9: 0x01270000, 0x03ea: 0x012700cf, 0x03eb: 0x01280000, 0x03ec: 0x012800f9, 0x03ed: 0x01290000,
		0x03ee: 0x0129006b, 0x03ef: 0x012a0000, 0x03f0: 0x012a00e8, 0x03f1: 0x012b0000, 0x03f2: 0x012b0030,
		0x03f3: 0x012c0000, 0x03f4: 0x012c00e7, 0x03f5: 0x012d0000, 0x03f6: 0x012d001b, 0x03f7: 0x012d00a6,
		0x03f8: 0x012e0000, 0x03f9: 0x012e0021, 0x03fa: 0x012e0032, 0x03fb: 0x012e00ef, 0x03fc: 0x012f0000,
		0x03fd: 0x012f0800, 0x03fe: 0x012f0831, 0x03ff: 0x012f0900, 0x0400: 0x012f0961, 0x0401: 0x01300000,
		0x0402: 0x01300031, 0x0403: 0x01310000, 0x0404: 0x0131008b, 0x0405: 0x01320000, 0x0406: 0x01320800,
		0x0407: 0x01320831, 0x0408: 0x01320861, 0x0409: 0x01320896, 0x040a: 0x013208c8, 0x040b: 0x01320900,
		0x040c: 0x01320961, 0x040d: 0x01320996, 0x040e: 0x013209e5, 0x040f: 0x01330000, 0x0410: 0x013300f9,
	}

	for expectedTagID, expectedTag := range expected {
		if tag := localeTags.tag(expectedTagID); tag != expectedTag {
			t.Errorf("unexpected tag for id %d, %#x", uint(expectedTagID), tag)
		}
		if tagID := localeTags.tagID(expectedTag.langID(), expectedTag.scriptID(), expectedTag.regionID()); tagID != expectedTagID {
			t.Errorf("unexpected tag id for tag %#x: %d", expectedTag, uint(tagID))
		}
	}
}

func TestParentLocaleTags(t *testing.T) {
	expected := map[tagID]tagID{
		0x0074: 0x0073, 0x0374: 0x036e, 0x03fc: 0x040b, 0x03fd: 0x0406, 0x03fe: 0x0406, 0x03ff: 0x040b,
		0x040b: 0x0405,
	}

	for child, expectedParent := range expected {
		if parent := parentLocaleTags.parentID(child); parent != expectedParent {
			t.Errorf("unexpected parent id for child id %#x: %#x", child, parent)
		}
	}
}

func TestAffixes(t *testing.T) {
	expected := map[affixID]affix{ // affix id => affix
		0x01: "\x00\x00", 0x02: "\x00\x01%", 0x03: "\x00\x02¤",
		0x04: "\x00\x03 %", 0x05: "\x00\x04 ¤", 0x06: "\x00\x04 %",
		0x07: "\x00\x05 ¤", 0x08: "\x01\x01%", 0x09: "\x01\x01-",
		0x0a: "\x01\x02-%", 0x0b: "\x01\x03-¤", 0x0c: "\x01\x04- %",
		0x0d: "\x01\x05- ¤", 0x0e: "\x01\x05- %", 0x0f: "\x01\x06- ¤",
		0x10: "\x02\x02-%", 0x11: "\x02\x02¤", 0x12: "\x03\x03% ",
		0x13: "\x03\x03-¤", 0x14: "\x03\x03¤-", 0x15: "\x03\x07‏ ¤",
		0x16: "\x03\x0a‏ ‏¤", 0x17: "\x04\x04% -", 0x18: "\x04\x04-% ",
		0x19: "\x04\x04¤ ", 0x1a: "\x04\x08‏- ¤", 0x1b: "\x04\x0b‏- ‏¤",
		0x1c: "\x05\x05-¤ ", 0x1d: "\x05\x05¤- ", 0x1e: "\x05\x05¤ -",
		0x1f: "\x05\x05‎¤", 0x20: "\x06\x06-‎¤",
	}

	for expectedID, expectedStr := range expected {
		if s := affixes.affix(expectedID); s != expectedStr {
			t.Fatalf("unexpected affix string for id %d: %s", uint(expectedID), s)
		}
	}
}

func TestPatterns(t *testing.T) {
	expected := map[patternID]pattern{
		0x01: 0x020a100320, 0x02: 0x0109103320, 0x03: 0x0109122320, 0x04: 0x020a100330, 0x05: 0x0109103330,
		0x06: 0x0109122330, 0x07: 0x050d122330, 0x08: 0x050d122330, 0x09: 0x030b122330, 0x0a: 0x070f122330,
		0x0b: 0x040c100330, 0x0c: 0x060e100330, 0x0d: 0x0109103220, 0x0e: 0x0810100330, 0x0f: 0x0810100220,
		0x10: 0x1218100330, 0x11: 0x1217100220, 0x12: 0x020a100000, 0x13: 0x1113122320, 0x14: 0x1113122330,
		0x15: 0x1114122330, 0x16: 0x111d122330, 0x17: 0x1113122220, 0x18: 0x191c122320, 0x19: 0x191c122330,
		0x1a: 0x1914122330, 0x1b: 0x1919122330, 0x1c: 0x191e122330, 0x1d: 0x1f20122330, 0x1e: 0x151a122330,
		0x1f: 0x161b122330,
	}

	for id, expectedPattern := range expected {
		if pattern := patterns.pattern(id); pattern != expectedPattern {
			t.Fatalf("unexpected pattern for id %d: %#x", uint(id), pattern)
		}
	}
}

func TestNumberSymbols(t *testing.T) {
	expected := map[symbolsID]symbols{ // symbols id => symbols
		0x01: "\x01\x02\x03\x04\x07\x09\x0a\x0b,.%-∞ND,.", 0x02: "\x01\x02\x03\x04\x07\x0a\x0b\x0c,,%-∞NaN,,", 0x03: "\x01\x02\x03\x04\x07\x0a\x0b\x0c,.%-∞NaN,.",
		0x04: "\x01\x02\x03\x04\x07\x0a\x0b\x0c.,%-∞MaL.,", 0x05: "\x01\x02\x03\x04\x07\x0a\x0b\x0c.,%-∞NaN.,", 0x06: "\x01\x02\x03\x04\x07\x0a\x0b\x0c.,%-∞mnn.,",
		0x07: "\x01\x02\x03\x04\x07\x0c\x0d\x0e.,%-∞Nuimh.,", 0x08: "\x01\x02\x03\x04\x07\x10\x11\x12.,%-∞非数值.,", 0x09: "\x01\x02\x03\x04\x07\x10\x11\x12.,%-∞非數值.,",
		0x0a: "\x01\x02\x03\x04\x07\x1d\x1e\x1f.,%-∞Терхьаш дац.,", 0x0b: "\x01\x02\x03\x04\x07\x34\x35\x36,.%-∞ບໍ່​ແມ່ນ​ໂຕ​ເລກ,.", 0x0c: "\x01\x02\x03\x06\x09\x0c\x0d\x0e,.%−∞NaN,.",
		0x0d: "\x01\x02\x03\x07\x0a\x0d\x0e\x0f.,%‎-∞NaN.,", 0x0e: "\x01\x02\x09\x0d\x10\x22\x23\x24.,‎%‎‎-∞ليس رقمًا.,", 0x0f: "\x01\x03\x04\x05\x08\x0a\x0b\x0d, %-∞NS, ",
		0x10: "\x01\x03\x04\x05\x08\x0b\x0c\x0d, %-∞NaN,.", 0x11: "\x01\x03\x04\x05\x08\x0b\x0c\x0e, %-∞MdM, ", 0x12: "\x01\x03\x04\x05\x08\x0b\x0c\x0e, %-∞NaN, ",
		0x13: "\x01\x03\x04\x05\x08\x0b\x0c\x0e. %-∞NaN. ", 0x14: "\x01\x03\x04\x05\x08\x0e\x0f\x11, %-∞ՈչԹ, ", 0x15: "\x01\x03\x04\x05\x08\x0f\x10\x12, %-∞epiloho, ",
		0x16: "\x01\x03\x04\x05\x08\x11\x12\x14, %-∞san däl, ", 0x17: "\x01\x03\x04\x05\x08\x11\x12\x14, %-∞son emas, ", 0x18: "\x01\x03\x04\x05\x08\x18\x19\x1b, %-∞не число, ",
		0x19: "\x01\x03\x04\x05\x08\x18\x19\x1b, %-∞сан емес, ", 0x1a: "\x01\x03\x04\x05\x08\x18\x19\x1b, %-∞сан эмес, ", 0x1b: "\x01\x03\x04\x05\x08\x24\x25\x27, %-∞чыыһыла буотах, ",
		0x1c: "\x01\x03\x04\x05\x08\x28\x29\x2b, %-∞ҳақиқий сон эмас, ", 0x1d: "\x01\x03\x04\x05\x08\x30\x31\x33, %-∞არ არის რიცხვი, ", 0x1e: "\x01\x03\x04\x07\x0a\x0d\x0e\x10, %−∞NaN, ",
		0x1f: "\x01\x03\x04\x07\x0a\x12\x13\x15, %−∞epäluku, ", 0x20: "\x01\x04\x05\x06\x09\x0c\x0d\x10, %-∞NaN, ", 0x21: "\x01\x04\x05\x06\x09\x0c\x0d\x10, %-∞NaN. ",
		0x22: "\x01\x04\x05\x06\x09\x0c\x0d\x10.’%-∞NaN.’", 0x23: "\x01\x04\x05\x08\x0b\x0e\x0f\x12.’%−∞NaN.’", 0x24: "\x02\x04\x05\x0c\x0f\x12\x14\x16٫٬%‎-‎∞NaN٫٬",
		0x25: "\x02\x04\x06\x0a\x0d\x10\x12\x14٫٬٪‏-∞NaN٫٬", 0x26: "\x02\x04\x06\x0c\x0f\x19\x1b\x1d٫٬٪‎−∞ناعدد٫٬", 0x27: "\x02\x04\x06\x0d\x10\x13\x15\x17٫٬٪‎-‎∞NaN٫٬",
	}

	for expectedID, expectedStr := range expected {
		if s := numberSymbols.symbols(expectedID); s != expectedStr {
			t.Fatalf("unexpected symbols string for id %d: %s", uint(expectedID), s)
		}
	}
}

func TestZeros(t *testing.T) {
	expected := map[zeroID]string{ // zero id => zero
		0x01: "0", 0x02: "٠", 0x04: "۰", 0x06: "०", 0x09: "০", 0x0c: "𑄶",
	}

	for id, expected := range expected {
		if r := zeros.zero(id); string(r) != expected {
			t.Fatalf("unexpected zero for id %d: %s", uint(id), string(r))
		}
	}
}
